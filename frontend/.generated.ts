/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * Wapikit
 * The API collection for WapiKit
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult
} from '@tanstack/react-query'
import { customInstance } from './src/utils/api-client'
export type GetMessages200 = {
	messages?: MessageSchema[]
	paginationMeta?: PaginationMeta
}

export type GetMessagesStatus = (typeof GetMessagesStatus)[keyof typeof GetMessagesStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMessagesStatus = {
	read: 'read',
	unread: 'unread',
	sent: 'sent',
	failed: 'failed'
} as const

export type GetMessagesParams = {
	/**
	 * number of records to skip
	 */
	page?: number
	/**
	 * max number of records to return per page
	 */
	per_page?: number
	/**
	 * order by asc or desc
	 */
	order?: OrderEnum
	/**
	 * status of the message
	 */
	status?: GetMessagesStatus
	/**
	 * direction of the message
	 */
	direction?: MessageDirectionEnum
	/**
	 * query messages with a contact id.
	 */
	contact_id?: string
	/**
	 * query messages with a campaign id.
	 */
	campaign_id?: string
	/**
	 * query messages with a list id.
	 */
	list_id?: string
	/**
	 * query messages with a conversation id.
	 */
	conversation_id?: string
}

export type GetConversations200 = {
	conversations?: ConversationSchema[]
	paginationMeta?: PaginationMeta
}

export type GetConversationsStatus =
	(typeof GetConversationsStatus)[keyof typeof GetConversationsStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConversationsStatus = {
	resolved: 'resolved',
	unresolved: 'unresolved'
} as const

export type GetConversationsParams = {
	/**
	 * number of records to skip
	 */
	page?: number
	/**
	 * max number of records to return per page
	 */
	per_page?: number
	/**
	 * order by asc or desc
	 */
	order?: OrderEnum
	/**
	 * sort by a field
	 */
	status?: GetConversationsStatus
	/**
	 * query conversations with a contact id.
	 */
	contact_id?: string
	/**
	 * query conversations with a campaign id.
	 */
	campaign_id?: string
	/**
	 * query conversations with a list id.
	 */
	list_id?: string
	/**
	 * query conversations with a message id.
	 */
	message_id?: string
}

export type DeleteCampaignById404 = {
	message?: string
}

export type DeleteCampaignById400 = {
	message?: string
}

export type DeleteCampaignById200 = {
	data?: boolean
}

export type UpdateCampaignById404 = {
	message?: string
}

export type UpdateCampaignById400 = {
	message?: string
}

export type UpdateCampaignById200 = {
	data?: CampaignSchema
}

export type GetCampaignById404 = {
	message?: string
}

export type CreateCampaign400 = {
	message?: string
}

export type CreateCampaign200 = {
	data?: CampaignSchema
}

export type GetCampaignsParams = {
	/**
	 * number of records to skip
	 */
	page?: number
	/**
	 * max number of records to return per page
	 */
	per_page?: number
	/**
	 * order by asc or desc
	 */
	order?: OrderEnum
	/**
	 * sort by a field
	 */
	status?: CampaignStatusEnum
}

export type DeleteListById404 = {
	message?: string
}

export type DeleteListById400 = {
	message?: string
}

export type DeleteListById200 = {
	data?: boolean
}

export type UpdateListById404 = {
	message?: string
}

export type UpdateListById400 = {
	message?: string
}

export type UpdateListById200 = {
	data?: ContactListSchema
}

export type GetListById404 = {
	message?: string
}

export type CreateList400 = {
	message?: string
}

export type CreateList200 = {
	data?: ContactListSchema
}

export type GetContactListsParams = {
	/**
	 * number of records to skip
	 */
	page?: number
	/**
	 * max number of records to return per page
	 */
	per_page?: number
	/**
	 * order by asc or desc
	 */
	order?: OrderEnum
}

export type DeleteContactById404 = {
	message?: string
}

export type DeleteContactById400 = {
	message?: string
}

export type DeleteContactById200 = {
	data?: boolean
}

export type UpdateContactById404 = {
	message?: string
}

export type UpdateContactById400 = {
	message?: string
}

export type UpdateContactById200 = {
	data?: ContactSchema
}

export type GetContactById404 = {
	message?: string
}

export type DeleteContactsByList400 = {
	message?: string
}

export type DeleteContactsByList200 = {
	data?: boolean
}

export type DeleteContactsByListParams = {
	/**
	 * contact id/s to be deleted
	 */
	id: string
}

export type CreateContact400 = {
	message?: string
}

export type CreateContact200 = {
	data?: ContactSchema
}

export type GetContactsParams = {
	/**
	 * number of records to skip
	 */
	page: number
	/**
	 * max number of records to return per page
	 */
	per_page: number
	/**
	 * query subscribers with a list id.
	 */
	list_id?: string
	/**
	 * order by asc or desc
	 */
	order?: OrderEnum
	/**
	 * sort by a field
	 */
	status?: string
}

export type GetAllMobileNumbers200MobileNumbersItem = {
	createdAt?: string
	number?: string
	uniqueId?: string
}

export type GetAllMobileNumbers200 = {
	mobileNumbers?: GetAllMobileNumbers200MobileNumbersItem[]
}

export type GetAllTemplates200TemplatesItem = {
	content?: string
	createdAt?: string
	name?: string
	type?: string
	uniqueId?: string
}

export type GetAllTemplates200 = {
	templates?: GetAllTemplates200TemplatesItem[]
}

export type UpdateOrganizationMemberById200 = {
	data?: UpdateOrganizationMemberByIdResponseSchema
}

export type GetOrganizationMembersParams = {
	/**
	 * number of records to skip
	 */
	page: number
	/**
	 * max number of records to return per page
	 */
	per_page: number
	/**
	 * sorting order
	 */
	sortBy?: OrderEnum
}

export type UpdateSettingsBody = {
	key?: string
	value?: string
}

export type UpdateOrganizationRoleByIdBody = {
	key?: string
	value?: string
}

export type GetOrganizationRolesParams = {
	/**
	 * number of records to skip
	 */
	page: number
	/**
	 * max number of records to return per page
	 */
	per_page: number
	/**
	 * sorting order
	 */
	sortBy?: OrderEnum
}

export type GetOrganizations200 = {
	organizations?: OrganizationSchema[]
}

export type SwitchOrganizationBody = {
	organizationId?: string
}

export type Login404 = {
	message?: string
}

export type Login400 = {
	message?: string
}

export type GetHealthCheck200 = {
	data?: boolean
}

export type MessageSchemaContent = { [key: string]: any }

export interface MessageSchema {
	content?: MessageSchemaContent
	conversationId?: string
	createdAt?: string
	direction?: MessageDirectionEnum
	message?: string
	message_type?: MessageTypeEnum
	status?: MessageStatusEnum
	uniqueId?: string
}

export interface ConversationSchema {
	contactId?: string
	createdAt?: string
	message?: string
	uniqueId?: string
}

export interface UpdateCampaignSchema {
	description?: string
	enableLinkTracking?: boolean
	listId?: string
	name?: string
	tags?: TagSchema[]
	templateMessageId?: string
}

export interface NewCampaignSchema {
	description?: string
	enableLinkTracking?: boolean
	listIds?: string[]
	name?: string
	tags?: TagSchema[]
	templateMessageId?: string
}

export interface UpdateOrganizationMemberSchema {
	accessLevel?: UserRoleEnum
	email?: string
	password?: string
	username?: string
}

export interface NewOrganizationMemberSchema {
	accessLevel?: UserRoleEnum
	email?: string
	password?: string
	username?: string
}

export interface PaginationMeta {
	page?: number
	per_page?: number
	total?: number
}

export interface TagSchema {
	name?: string
	uniqueId?: string
}

export interface CampaignSchema {
	createdAt?: string
	description?: string
	isLinkTrackingEnabled?: boolean
	lists?: ContactListSchema[]
	name?: string
	scheduledAt?: string
	sentAt?: string
	status?: CampaignStatusEnum
	tags?: TagSchema[]
	templateMessageId?: string
	uniqueId?: string
}

export interface UpdateContactListSchema {
	description?: string
	name?: string
	tags?: TagSchema[]
}

export interface NewContactListSchema {
	contactIds?: string[]
	description?: string
	name?: string
	tags?: TagSchema[]
}

export interface ContactListSchema {
	createdAt?: string
	description?: string
	name?: string
	numberOfCampaignsSent?: number
	numberOfContacts?: number
	tags?: TagSchema[]
	uniqueId?: string
}

export type UpdateContactSchemaAttributes = { [key: string]: any }

export interface UpdateContactSchema {
	attributes?: UpdateContactSchemaAttributes
	name?: string
	phone?: string
}

export interface OrganizationRoleSchema {
	description?: string
	name?: string
	permissions?: RolePermissionEnum[]
	uniqueId?: string
}

export interface NewOrganizationRoleSchema {
	description?: string
	name?: string
	permissions?: RolePermissionEnum[]
}

export type NewContactSchemaAttributes = { [key: string]: any }

export interface NewContactSchema {
	attributes?: NewContactSchemaAttributes
	name?: string
	phone?: string
}

export type ContactSchemaAttributes = { [key: string]: any }

export interface ContactSchema {
	attributes?: ContactSchemaAttributes
	createdAt?: string
	lists?: ContactListSchema[]
	name?: string
	phone?: string
	uniqueId?: string
}

export interface DeleteRoleByIdResponseSchema {
	data?: boolean
}

export interface UpdateRoleByIdResponseSchema {
	role?: OrganizationRoleSchema
}

export interface CreateNewRoleResponseSchema {
	role?: OrganizationRoleSchema
}

export interface GetRoleByIdResponseSchema {
	role?: OrganizationRoleSchema
}

export interface DeleteOrganizationMemberByIdResponseSchema {
	data?: boolean
}

export interface UpdateOrganizationMemberByIdResponseSchema {
	member?: OrganizationMemberSchema
}

export interface CreateOrganizationMemberResponseSchema {
	member?: OrganizationMemberSchema
}

export interface GetOrganizationMemberByIdResponseSchema {
	member?: OrganizationMemberSchema
}

export interface GetOrganizationMemberRolesResponseSchema {
	roles?: OrganizationRoleSchema[]
}

export interface GetOrganizationMembersResponseSchema {
	members?: OrganizationMemberSchema[]
	paginationMeta?: PaginationMeta
}

export type UpdateOrganizationSettingsResponseSchemaSetting = {
	key?: string
	value?: string
}

export interface UpdateOrganizationSettingsResponseSchema {
	setting?: UpdateOrganizationSettingsResponseSchemaSetting
}

export type GetOrganizationSettingsResponseSchemaSettingsItem = {
	key?: string
	value?: string
}

export interface GetOrganizationSettingsResponseSchema {
	settings?: GetOrganizationSettingsResponseSchemaSettingsItem[]
}

export interface GetOrganizationRolesResponseSchema {
	paginationMeta?: PaginationMeta
	roles?: OrganizationRoleSchema[]
}

export interface UpdateOrganizationResponseSchema {
	organization?: OrganizationSchema
}

export interface DeleteOrganizationResponseSchema {
	data?: boolean
}

export interface GetOrganizationResponseSchema {
	organization?: OrganizationSchema
}

export interface CreateNewOrganizationResponseSchema {
	organization?: OrganizationSchema
}

export interface NewOrganizationSchema {
	name?: string
}

export interface GetCampaignByIdResponseSchema {
	campaign?: CampaignSchema
}

export interface GetContactListByIdSchema {
	list?: ContactListSchema
}

export interface GetContactByIdResponseSchema {
	contact?: ContactSchema
}

export interface GetContactsResponseSchema {
	contacts?: ContactSchema[]
	paginationMeta?: PaginationMeta
}

export interface GetContactListResponseSchema {
	lists?: ContactListSchema[]
	paginationMeta?: PaginationMeta
}

export interface GetCampaignResponseSchema {
	campaigns?: CampaignSchema[]
	paginationMeta?: PaginationMeta
}

export interface SwitchOrganizationResponseSchema {
	token?: string
}

export interface ApiKeySchema {
	createdAt?: string
	key?: string
	uniqueId?: string
}

export interface GetApiKeysResponseSchema {
	apiKeys?: ApiKeySchema[]
}

export interface LoginResponseBodySchema {
	isOnboardingCompleted?: boolean
	token?: string
}

export interface LoginRequestBodySchema {
	password: string
	username: string
}

export interface OrganizationMemberSchema {
	accessLevel?: UserRoleEnum
	createdAt?: string
	email?: string
	name?: string
	roles?: OrganizationRoleSchema[]
	uniqueId?: string
}

export interface OrganizationSchema {
	createdAt?: string
	faviconUrl?: string
	logoUrl?: string
	name?: string
	uniqueId?: string
	websiteUrl?: string
}

export interface UserSchema {
	createdAt?: string
	'currentOrganizationRole"'?: string
	email?: string
	name?: string
	organizations?: OrganizationSchema[]
	profilePicture?: string
	uniqueId?: string
	username?: string
}

export interface GetUserResponseSchema {
	user?: UserSchema
}

export type RolePermissionEnum = (typeof RolePermissionEnum)[keyof typeof RolePermissionEnum]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RolePermissionEnum = {
	GetTeam: 'GetTeam',
	UpdateTeam: 'UpdateTeam',
	GetCampaign: 'GetCampaign',
	UpdateCampaign: 'UpdateCampaign',
	getConversations: 'getConversations',
	UpdateConversation: 'UpdateConversation',
	MessageInConversation: 'MessageInConversation',
	GetList: 'GetList',
	UpdateList: 'UpdateList',
	GetApiKey: 'GetApiKey',
	UpdateApikey: 'UpdateApikey',
	GetAppSettings: 'GetAppSettings',
	UpdateAppSettings: 'UpdateAppSettings'
} as const

export type MessageTypeEnum = (typeof MessageTypeEnum)[keyof typeof MessageTypeEnum]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MessageTypeEnum = {
	Text: 'Text',
	Image: 'Image',
	Video: 'Video',
	Audio: 'Audio',
	Document: 'Document',
	Sticker: 'Sticker',
	Location: 'Location',
	Contacts: 'Contacts',
	Reaction: 'Reaction',
	Address: 'Address'
} as const

export type MessageDirectionEnum = (typeof MessageDirectionEnum)[keyof typeof MessageDirectionEnum]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MessageDirectionEnum = {
	InBound: 'InBound',
	OutBound: 'OutBound'
} as const

export type MessageStatusEnum = (typeof MessageStatusEnum)[keyof typeof MessageStatusEnum]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MessageStatusEnum = {
	Read: 'Read',
	Unread: 'Unread',
	Sent: 'Sent',
	Delivered: 'Delivered',
	UnDelivered: 'UnDelivered',
	Failed: 'Failed'
} as const

export type UserAccountStatusEnum =
	(typeof UserAccountStatusEnum)[keyof typeof UserAccountStatusEnum]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserAccountStatusEnum = {
	Active: 'Active',
	Deleted: 'Deleted',
	Suspended: 'Suspended'
} as const

export type CampaignStatusEnum = (typeof CampaignStatusEnum)[keyof typeof CampaignStatusEnum]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CampaignStatusEnum = {
	Draft: 'Draft',
	Sent: 'Sent',
	Scheduled: 'Scheduled',
	Running: 'Running',
	Cancelled: 'Cancelled'
} as const

export type UserRoleEnum = (typeof UserRoleEnum)[keyof typeof UserRoleEnum]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRoleEnum = {
	Owner: 'Owner',
	Admin: 'Admin',
	Member: 'Member'
} as const

export type OrderEnum = (typeof OrderEnum)[keyof typeof OrderEnum]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderEnum = {
	asc: 'asc',
	desc: 'desc'
} as const

/**
 * healthcheck endpoint
 */
export const getHealthCheck = (signal?: AbortSignal) => {
	return customInstance<GetHealthCheck200>({ url: `/health-check`, method: 'GET', signal })
}

export const getGetHealthCheckQueryKey = () => {
	return [`/health-check`] as const
}

export const getGetHealthCheckQueryOptions = <
	TData = Awaited<ReturnType<typeof getHealthCheck>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthCheck>>, TError, TData>>
}) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetHealthCheckQueryKey()

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealthCheck>>> = ({ signal }) =>
		getHealthCheck(signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getHealthCheck>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetHealthCheckQueryResult = NonNullable<Awaited<ReturnType<typeof getHealthCheck>>>
export type GetHealthCheckQueryError = unknown

export const useGetHealthCheck = <
	TData = Awaited<ReturnType<typeof getHealthCheck>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthCheck>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetHealthCheckQueryOptions(options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * login endpoint
 */
export const login = (loginRequestBodySchema: LoginRequestBodySchema) => {
	return customInstance<LoginResponseBodySchema>({
		url: `/auth/login`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: loginRequestBodySchema
	})
}

export const getLoginMutationOptions = <
	TError = Login400 | Login404,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof login>>,
		TError,
		{ data: LoginRequestBodySchema },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof login>>,
	TError,
	{ data: LoginRequestBodySchema },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof login>>,
		{ data: LoginRequestBodySchema }
	> = props => {
		const { data } = props ?? {}

		return login(data)
	}

	return { mutationFn, ...mutationOptions }
}

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
export type LoginMutationBody = LoginRequestBodySchema
export type LoginMutationError = Login400 | Login404

export const useLogin = <TError = Login400 | Login404, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof login>>,
		TError,
		{ data: LoginRequestBodySchema },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof login>>,
	TError,
	{ data: LoginRequestBodySchema },
	TContext
> => {
	const mutationOptions = getLoginMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * returns the user object
 */
export const getUser = (signal?: AbortSignal) => {
	return customInstance<GetUserResponseSchema>({ url: `/user`, method: 'GET', signal })
}

export const getGetUserQueryKey = () => {
	return [`/user`] as const
}

export const getGetUserQueryOptions = <
	TData = Awaited<ReturnType<typeof getUser>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>
}) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetUserQueryKey()

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({ signal }) =>
		getUser(signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getUser>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetUserQueryResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type GetUserQueryError = unknown

export const useGetUser = <
	TData = Awaited<ReturnType<typeof getUser>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetUserQueryOptions(options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * returns all api keys
 */
export const getApiKeys = (signal?: AbortSignal) => {
	return customInstance<GetApiKeysResponseSchema>({
		url: `/auth/api-keys`,
		method: 'GET',
		signal
	})
}

export const getGetApiKeysQueryKey = () => {
	return [`/auth/api-keys`] as const
}

export const getGetApiKeysQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiKeys>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiKeys>>, TError, TData>>
}) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetApiKeysQueryKey()

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiKeys>>> = ({ signal }) =>
		getApiKeys(signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiKeys>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetApiKeysQueryResult = NonNullable<Awaited<ReturnType<typeof getApiKeys>>>
export type GetApiKeysQueryError = unknown

export const useGetApiKeys = <
	TData = Awaited<ReturnType<typeof getApiKeys>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiKeys>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetApiKeysQueryOptions(options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * switch user organization
 */
export const switchOrganization = (switchOrganizationBody: SwitchOrganizationBody) => {
	return customInstance<SwitchOrganizationResponseSchema>({
		url: `/auth/switch`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: switchOrganizationBody
	})
}

export const getSwitchOrganizationMutationOptions = <
	TError = unknown,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof switchOrganization>>,
		TError,
		{ data: SwitchOrganizationBody },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof switchOrganization>>,
	TError,
	{ data: SwitchOrganizationBody },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof switchOrganization>>,
		{ data: SwitchOrganizationBody }
	> = props => {
		const { data } = props ?? {}

		return switchOrganization(data)
	}

	return { mutationFn, ...mutationOptions }
}

export type SwitchOrganizationMutationResult = NonNullable<
	Awaited<ReturnType<typeof switchOrganization>>
>
export type SwitchOrganizationMutationBody = SwitchOrganizationBody
export type SwitchOrganizationMutationError = unknown

export const useSwitchOrganization = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof switchOrganization>>,
		TError,
		{ data: SwitchOrganizationBody },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof switchOrganization>>,
	TError,
	{ data: SwitchOrganizationBody },
	TContext
> => {
	const mutationOptions = getSwitchOrganizationMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * create a new organization
 */
export const createOrganization = (newOrganizationSchema: NewOrganizationSchema) => {
	return customInstance<CreateNewOrganizationResponseSchema>({
		url: `/organization`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: newOrganizationSchema
	})
}

export const getCreateOrganizationMutationOptions = <
	TError = unknown,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createOrganization>>,
		TError,
		{ data: NewOrganizationSchema },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof createOrganization>>,
	TError,
	{ data: NewOrganizationSchema },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createOrganization>>,
		{ data: NewOrganizationSchema }
	> = props => {
		const { data } = props ?? {}

		return createOrganization(data)
	}

	return { mutationFn, ...mutationOptions }
}

export type CreateOrganizationMutationResult = NonNullable<
	Awaited<ReturnType<typeof createOrganization>>
>
export type CreateOrganizationMutationBody = NewOrganizationSchema
export type CreateOrganizationMutationError = unknown

export const useCreateOrganization = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createOrganization>>,
		TError,
		{ data: NewOrganizationSchema },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof createOrganization>>,
	TError,
	{ data: NewOrganizationSchema },
	TContext
> => {
	const mutationOptions = getCreateOrganizationMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * returns all organizations
 */
export const getOrganizations = (signal?: AbortSignal) => {
	return customInstance<GetOrganizations200>({ url: `/organization`, method: 'GET', signal })
}

export const getGetOrganizationsQueryKey = () => {
	return [`/organization`] as const
}

export const getGetOrganizationsQueryOptions = <
	TData = Awaited<ReturnType<typeof getOrganizations>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganizations>>, TError, TData>>
}) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetOrganizationsQueryKey()

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganizations>>> = ({ signal }) =>
		getOrganizations(signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getOrganizations>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrganizations>>>
export type GetOrganizationsQueryError = unknown

export const useGetOrganizations = <
	TData = Awaited<ReturnType<typeof getOrganizations>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganizations>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetOrganizationsQueryOptions(options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * returns the organization object
 */
export const getOrganization = (id: string, signal?: AbortSignal) => {
	return customInstance<GetOrganizationResponseSchema>({
		url: `/organization/${id}`,
		method: 'GET',
		signal
	})
}

export const getGetOrganizationQueryKey = (id: string) => {
	return [`/organization/${id}`] as const
}

export const getGetOrganizationQueryOptions = <
	TData = Awaited<ReturnType<typeof getOrganization>>,
	TError = unknown
>(
	id: string,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganization>>, TError, TData>>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetOrganizationQueryKey(id)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganization>>> = ({ signal }) =>
		getOrganization(id, signal)

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getOrganization>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetOrganizationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrganization>>>
export type GetOrganizationQueryError = unknown

export const useGetOrganization = <
	TData = Awaited<ReturnType<typeof getOrganization>>,
	TError = unknown
>(
	id: string,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganization>>, TError, TData>>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetOrganizationQueryOptions(id, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * returns all organization roles
 */
export const getOrganizationRoles = (params: GetOrganizationRolesParams, signal?: AbortSignal) => {
	return customInstance<GetOrganizationRolesResponseSchema>({
		url: `/organization/roles`,
		method: 'GET',
		params,
		signal
	})
}

export const getGetOrganizationRolesQueryKey = (params: GetOrganizationRolesParams) => {
	return [`/organization/roles`, ...(params ? [params] : [])] as const
}

export const getGetOrganizationRolesQueryOptions = <
	TData = Awaited<ReturnType<typeof getOrganizationRoles>>,
	TError = unknown
>(
	params: GetOrganizationRolesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getOrganizationRoles>>, TError, TData>
		>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetOrganizationRolesQueryKey(params)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganizationRoles>>> = ({ signal }) =>
		getOrganizationRoles(params, signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getOrganizationRoles>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetOrganizationRolesQueryResult = NonNullable<
	Awaited<ReturnType<typeof getOrganizationRoles>>
>
export type GetOrganizationRolesQueryError = unknown

export const useGetOrganizationRoles = <
	TData = Awaited<ReturnType<typeof getOrganizationRoles>>,
	TError = unknown
>(
	params: GetOrganizationRolesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getOrganizationRoles>>, TError, TData>
		>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetOrganizationRolesQueryOptions(params, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * create a new organization role
 */
export const createOrganizationRole = (newOrganizationRoleSchema: NewOrganizationRoleSchema) => {
	return customInstance<CreateNewRoleResponseSchema>({
		url: `/organization/roles`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: newOrganizationRoleSchema
	})
}

export const getCreateOrganizationRoleMutationOptions = <
	TError = unknown,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createOrganizationRole>>,
		TError,
		{ data: NewOrganizationRoleSchema },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof createOrganizationRole>>,
	TError,
	{ data: NewOrganizationRoleSchema },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createOrganizationRole>>,
		{ data: NewOrganizationRoleSchema }
	> = props => {
		const { data } = props ?? {}

		return createOrganizationRole(data)
	}

	return { mutationFn, ...mutationOptions }
}

export type CreateOrganizationRoleMutationResult = NonNullable<
	Awaited<ReturnType<typeof createOrganizationRole>>
>
export type CreateOrganizationRoleMutationBody = NewOrganizationRoleSchema
export type CreateOrganizationRoleMutationError = unknown

export const useCreateOrganizationRole = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createOrganizationRole>>,
		TError,
		{ data: NewOrganizationRoleSchema },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof createOrganizationRole>>,
	TError,
	{ data: NewOrganizationRoleSchema },
	TContext
> => {
	const mutationOptions = getCreateOrganizationRoleMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * returns a single organization role
 */
export const getOrganizationRoleById = (id: string, signal?: AbortSignal) => {
	return customInstance<GetRoleByIdResponseSchema>({
		url: `/organization/roles/${id}`,
		method: 'GET',
		signal
	})
}

export const getGetOrganizationRoleByIdQueryKey = (id: string) => {
	return [`/organization/roles/${id}`] as const
}

export const getGetOrganizationRoleByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getOrganizationRoleById>>,
	TError = unknown
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getOrganizationRoleById>>, TError, TData>
		>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetOrganizationRoleByIdQueryKey(id)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganizationRoleById>>> = ({
		signal
	}) => getOrganizationRoleById(id, signal)

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getOrganizationRoleById>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetOrganizationRoleByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getOrganizationRoleById>>
>
export type GetOrganizationRoleByIdQueryError = unknown

export const useGetOrganizationRoleById = <
	TData = Awaited<ReturnType<typeof getOrganizationRoleById>>,
	TError = unknown
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getOrganizationRoleById>>, TError, TData>
		>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetOrganizationRoleByIdQueryOptions(id, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * updates a organization role
 */
export const updateOrganizationRoleById = (
	id: string,
	updateOrganizationRoleByIdBody: UpdateOrganizationRoleByIdBody
) => {
	return customInstance<UpdateRoleByIdResponseSchema>({
		url: `/organization/roles/${id}`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: updateOrganizationRoleByIdBody
	})
}

export const getUpdateOrganizationRoleByIdMutationOptions = <
	TError = unknown,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateOrganizationRoleById>>,
		TError,
		{ id: string; data: UpdateOrganizationRoleByIdBody },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateOrganizationRoleById>>,
	TError,
	{ id: string; data: UpdateOrganizationRoleByIdBody },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateOrganizationRoleById>>,
		{ id: string; data: UpdateOrganizationRoleByIdBody }
	> = props => {
		const { id, data } = props ?? {}

		return updateOrganizationRoleById(id, data)
	}

	return { mutationFn, ...mutationOptions }
}

export type UpdateOrganizationRoleByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateOrganizationRoleById>>
>
export type UpdateOrganizationRoleByIdMutationBody = UpdateOrganizationRoleByIdBody
export type UpdateOrganizationRoleByIdMutationError = unknown

export const useUpdateOrganizationRoleById = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateOrganizationRoleById>>,
		TError,
		{ id: string; data: UpdateOrganizationRoleByIdBody },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof updateOrganizationRoleById>>,
	TError,
	{ id: string; data: UpdateOrganizationRoleByIdBody },
	TContext
> => {
	const mutationOptions = getUpdateOrganizationRoleByIdMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * delete an organization role
 */
export const deleteOrganizationRoleById = (id: string) => {
	return customInstance<DeleteRoleByIdResponseSchema>({
		url: `/organization/roles/${id}`,
		method: 'DELETE'
	})
}

export const getDeleteOrganizationRoleByIdMutationOptions = <
	TError = unknown,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteOrganizationRoleById>>,
		TError,
		{ id: string },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteOrganizationRoleById>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteOrganizationRoleById>>,
		{ id: string }
	> = props => {
		const { id } = props ?? {}

		return deleteOrganizationRoleById(id)
	}

	return { mutationFn, ...mutationOptions }
}

export type DeleteOrganizationRoleByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteOrganizationRoleById>>
>

export type DeleteOrganizationRoleByIdMutationError = unknown

export const useDeleteOrganizationRoleById = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteOrganizationRoleById>>,
		TError,
		{ id: string },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteOrganizationRoleById>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getDeleteOrganizationRoleByIdMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * returns all settings
 */
export const getSettings = (signal?: AbortSignal) => {
	return customInstance<GetOrganizationSettingsResponseSchema>({
		url: `/organization/settings`,
		method: 'GET',
		signal
	})
}

export const getGetSettingsQueryKey = () => {
	return [`/organization/settings`] as const
}

export const getGetSettingsQueryOptions = <
	TData = Awaited<ReturnType<typeof getSettings>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSettings>>, TError, TData>>
}) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetSettingsQueryKey()

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getSettings>>> = ({ signal }) =>
		getSettings(signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getSettings>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getSettings>>>
export type GetSettingsQueryError = unknown

export const useGetSettings = <
	TData = Awaited<ReturnType<typeof getSettings>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSettings>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetSettingsQueryOptions(options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * updates organization setting
 */
export const updateSettings = (updateSettingsBody: UpdateSettingsBody) => {
	return customInstance<UpdateOrganizationSettingsResponseSchema>({
		url: `/organization/settings`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: updateSettingsBody
	})
}

export const getUpdateSettingsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateSettings>>,
		TError,
		{ data: UpdateSettingsBody },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateSettings>>,
	TError,
	{ data: UpdateSettingsBody },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateSettings>>,
		{ data: UpdateSettingsBody }
	> = props => {
		const { data } = props ?? {}

		return updateSettings(data)
	}

	return { mutationFn, ...mutationOptions }
}

export type UpdateSettingsMutationResult = NonNullable<Awaited<ReturnType<typeof updateSettings>>>
export type UpdateSettingsMutationBody = UpdateSettingsBody
export type UpdateSettingsMutationError = unknown

export const useUpdateSettings = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateSettings>>,
		TError,
		{ data: UpdateSettingsBody },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof updateSettings>>,
	TError,
	{ data: UpdateSettingsBody },
	TContext
> => {
	const mutationOptions = getUpdateSettingsMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * returns all organization members
 */
export const getOrganizationMembers = (
	params: GetOrganizationMembersParams,
	signal?: AbortSignal
) => {
	return customInstance<GetOrganizationMembersResponseSchema>({
		url: `/organization/members`,
		method: 'GET',
		params,
		signal
	})
}

export const getGetOrganizationMembersQueryKey = (params: GetOrganizationMembersParams) => {
	return [`/organization/members`, ...(params ? [params] : [])] as const
}

export const getGetOrganizationMembersQueryOptions = <
	TData = Awaited<ReturnType<typeof getOrganizationMembers>>,
	TError = unknown
>(
	params: GetOrganizationMembersParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getOrganizationMembers>>, TError, TData>
		>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetOrganizationMembersQueryKey(params)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganizationMembers>>> = ({
		signal
	}) => getOrganizationMembers(params, signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getOrganizationMembers>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetOrganizationMembersQueryResult = NonNullable<
	Awaited<ReturnType<typeof getOrganizationMembers>>
>
export type GetOrganizationMembersQueryError = unknown

export const useGetOrganizationMembers = <
	TData = Awaited<ReturnType<typeof getOrganizationMembers>>,
	TError = unknown
>(
	params: GetOrganizationMembersParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getOrganizationMembers>>, TError, TData>
		>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetOrganizationMembersQueryOptions(params, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * create a new organization member
 */
export const createOrganizationMember = (
	newOrganizationMemberSchema: NewOrganizationMemberSchema
) => {
	return customInstance<CreateOrganizationMemberResponseSchema>({
		url: `/organization/members`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: newOrganizationMemberSchema
	})
}

export const getCreateOrganizationMemberMutationOptions = <
	TError = unknown,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createOrganizationMember>>,
		TError,
		{ data: NewOrganizationMemberSchema },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof createOrganizationMember>>,
	TError,
	{ data: NewOrganizationMemberSchema },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createOrganizationMember>>,
		{ data: NewOrganizationMemberSchema }
	> = props => {
		const { data } = props ?? {}

		return createOrganizationMember(data)
	}

	return { mutationFn, ...mutationOptions }
}

export type CreateOrganizationMemberMutationResult = NonNullable<
	Awaited<ReturnType<typeof createOrganizationMember>>
>
export type CreateOrganizationMemberMutationBody = NewOrganizationMemberSchema
export type CreateOrganizationMemberMutationError = unknown

export const useCreateOrganizationMember = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createOrganizationMember>>,
		TError,
		{ data: NewOrganizationMemberSchema },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof createOrganizationMember>>,
	TError,
	{ data: NewOrganizationMemberSchema },
	TContext
> => {
	const mutationOptions = getCreateOrganizationMemberMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * returns all roles of an organization member
 */
export const getOrganizationMemberRoles = (id: string, signal?: AbortSignal) => {
	return customInstance<GetOrganizationMemberRolesResponseSchema>({
		url: `/organization/members/${id}/roles`,
		method: 'GET',
		signal
	})
}

export const getGetOrganizationMemberRolesQueryKey = (id: string) => {
	return [`/organization/members/${id}/roles`] as const
}

export const getGetOrganizationMemberRolesQueryOptions = <
	TData = Awaited<ReturnType<typeof getOrganizationMemberRoles>>,
	TError = unknown
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getOrganizationMemberRoles>>, TError, TData>
		>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetOrganizationMemberRolesQueryKey(id)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganizationMemberRoles>>> = ({
		signal
	}) => getOrganizationMemberRoles(id, signal)

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getOrganizationMemberRoles>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetOrganizationMemberRolesQueryResult = NonNullable<
	Awaited<ReturnType<typeof getOrganizationMemberRoles>>
>
export type GetOrganizationMemberRolesQueryError = unknown

export const useGetOrganizationMemberRoles = <
	TData = Awaited<ReturnType<typeof getOrganizationMemberRoles>>,
	TError = unknown
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getOrganizationMemberRoles>>, TError, TData>
		>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetOrganizationMemberRolesQueryOptions(id, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * returns a single organization member
 */
export const getOrganizationMemberById = (id: string, signal?: AbortSignal) => {
	return customInstance<GetOrganizationMemberByIdResponseSchema>({
		url: `/organization/members/${id}`,
		method: 'GET',
		signal
	})
}

export const getGetOrganizationMemberByIdQueryKey = (id: string) => {
	return [`/organization/members/${id}`] as const
}

export const getGetOrganizationMemberByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getOrganizationMemberById>>,
	TError = unknown
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getOrganizationMemberById>>, TError, TData>
		>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetOrganizationMemberByIdQueryKey(id)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganizationMemberById>>> = ({
		signal
	}) => getOrganizationMemberById(id, signal)

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getOrganizationMemberById>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetOrganizationMemberByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getOrganizationMemberById>>
>
export type GetOrganizationMemberByIdQueryError = unknown

export const useGetOrganizationMemberById = <
	TData = Awaited<ReturnType<typeof getOrganizationMemberById>>,
	TError = unknown
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getOrganizationMemberById>>, TError, TData>
		>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetOrganizationMemberByIdQueryOptions(id, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * update a organization member
 */
export const updateOrganizationMemberById = (
	id: string,
	newOrganizationMemberSchema: NewOrganizationMemberSchema
) => {
	return customInstance<UpdateOrganizationMemberById200>({
		url: `/organization/members/${id}`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: newOrganizationMemberSchema
	})
}

export const getUpdateOrganizationMemberByIdMutationOptions = <
	TError = unknown,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateOrganizationMemberById>>,
		TError,
		{ id: string; data: NewOrganizationMemberSchema },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateOrganizationMemberById>>,
	TError,
	{ id: string; data: NewOrganizationMemberSchema },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateOrganizationMemberById>>,
		{ id: string; data: NewOrganizationMemberSchema }
	> = props => {
		const { id, data } = props ?? {}

		return updateOrganizationMemberById(id, data)
	}

	return { mutationFn, ...mutationOptions }
}

export type UpdateOrganizationMemberByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateOrganizationMemberById>>
>
export type UpdateOrganizationMemberByIdMutationBody = NewOrganizationMemberSchema
export type UpdateOrganizationMemberByIdMutationError = unknown

export const useUpdateOrganizationMemberById = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateOrganizationMemberById>>,
		TError,
		{ id: string; data: NewOrganizationMemberSchema },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof updateOrganizationMemberById>>,
	TError,
	{ id: string; data: NewOrganizationMemberSchema },
	TContext
> => {
	const mutationOptions = getUpdateOrganizationMemberByIdMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * delete an organization member
 */
export const deleteOrganizationMemberById = (id: string) => {
	return customInstance<DeleteOrganizationMemberByIdResponseSchema>({
		url: `/organization/members/${id}`,
		method: 'DELETE'
	})
}

export const getDeleteOrganizationMemberByIdMutationOptions = <
	TError = unknown,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteOrganizationMemberById>>,
		TError,
		{ id: string },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteOrganizationMemberById>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteOrganizationMemberById>>,
		{ id: string }
	> = props => {
		const { id } = props ?? {}

		return deleteOrganizationMemberById(id)
	}

	return { mutationFn, ...mutationOptions }
}

export type DeleteOrganizationMemberByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteOrganizationMemberById>>
>

export type DeleteOrganizationMemberByIdMutationError = unknown

export const useDeleteOrganizationMemberById = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteOrganizationMemberById>>,
		TError,
		{ id: string },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteOrganizationMemberById>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getDeleteOrganizationMemberByIdMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * returns all templates
 */
export const getAllTemplates = (signal?: AbortSignal) => {
	return customInstance<GetAllTemplates200>({
		url: `/organization/syncTemplates`,
		method: 'GET',
		signal
	})
}

export const getGetAllTemplatesQueryKey = () => {
	return [`/organization/syncTemplates`] as const
}

export const getGetAllTemplatesQueryOptions = <
	TData = Awaited<ReturnType<typeof getAllTemplates>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllTemplates>>, TError, TData>>
}) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetAllTemplatesQueryKey()

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllTemplates>>> = ({ signal }) =>
		getAllTemplates(signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getAllTemplates>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetAllTemplatesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllTemplates>>>
export type GetAllTemplatesQueryError = unknown

export const useGetAllTemplates = <
	TData = Awaited<ReturnType<typeof getAllTemplates>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllTemplates>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetAllTemplatesQueryOptions(options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * returns all mobile numbers
 */
export const getAllMobileNumbers = (signal?: AbortSignal) => {
	return customInstance<GetAllMobileNumbers200>({
		url: `/organization/syncMobileNumbers`,
		method: 'GET',
		signal
	})
}

export const getGetAllMobileNumbersQueryKey = () => {
	return [`/organization/syncMobileNumbers`] as const
}

export const getGetAllMobileNumbersQueryOptions = <
	TData = Awaited<ReturnType<typeof getAllMobileNumbers>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMobileNumbers>>, TError, TData>>
}) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetAllMobileNumbersQueryKey()

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllMobileNumbers>>> = ({ signal }) =>
		getAllMobileNumbers(signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getAllMobileNumbers>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetAllMobileNumbersQueryResult = NonNullable<
	Awaited<ReturnType<typeof getAllMobileNumbers>>
>
export type GetAllMobileNumbersQueryError = unknown

export const useGetAllMobileNumbers = <
	TData = Awaited<ReturnType<typeof getAllMobileNumbers>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMobileNumbers>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetAllMobileNumbersQueryOptions(options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * returns all contacts.
 */
export const getContacts = (params: GetContactsParams, signal?: AbortSignal) => {
	return customInstance<GetContactsResponseSchema>({
		url: `/contacts`,
		method: 'GET',
		params,
		signal
	})
}

export const getGetContactsQueryKey = (params: GetContactsParams) => {
	return [`/contacts`, ...(params ? [params] : [])] as const
}

export const getGetContactsQueryOptions = <
	TData = Awaited<ReturnType<typeof getContacts>>,
	TError = unknown
>(
	params: GetContactsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContacts>>, TError, TData>>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetContactsQueryKey(params)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getContacts>>> = ({ signal }) =>
		getContacts(params, signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getContacts>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetContactsQueryResult = NonNullable<Awaited<ReturnType<typeof getContacts>>>
export type GetContactsQueryError = unknown

export const useGetContacts = <TData = Awaited<ReturnType<typeof getContacts>>, TError = unknown>(
	params: GetContactsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContacts>>, TError, TData>>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetContactsQueryOptions(params, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * handles creation of new contact
 */
export const createContact = (newContactSchema: NewContactSchema) => {
	return customInstance<CreateContact200>({
		url: `/contacts`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: newContactSchema
	})
}

export const getCreateContactMutationOptions = <
	TError = CreateContact400,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createContact>>,
		TError,
		{ data: NewContactSchema },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof createContact>>,
	TError,
	{ data: NewContactSchema },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createContact>>,
		{ data: NewContactSchema }
	> = props => {
		const { data } = props ?? {}

		return createContact(data)
	}

	return { mutationFn, ...mutationOptions }
}

export type CreateContactMutationResult = NonNullable<Awaited<ReturnType<typeof createContact>>>
export type CreateContactMutationBody = NewContactSchema
export type CreateContactMutationError = CreateContact400

export const useCreateContact = <TError = CreateContact400, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createContact>>,
		TError,
		{ data: NewContactSchema },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof createContact>>,
	TError,
	{ data: NewContactSchema },
	TContext
> => {
	const mutationOptions = getCreateContactMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * handles contact deletion
 */
export const deleteContactsByList = (params: DeleteContactsByListParams) => {
	return customInstance<DeleteContactsByList200>({ url: `/contacts`, method: 'DELETE', params })
}

export const getDeleteContactsByListMutationOptions = <
	TError = DeleteContactsByList400,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteContactsByList>>,
		TError,
		{ params: DeleteContactsByListParams },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteContactsByList>>,
	TError,
	{ params: DeleteContactsByListParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteContactsByList>>,
		{ params: DeleteContactsByListParams }
	> = props => {
		const { params } = props ?? {}

		return deleteContactsByList(params)
	}

	return { mutationFn, ...mutationOptions }
}

export type DeleteContactsByListMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteContactsByList>>
>

export type DeleteContactsByListMutationError = DeleteContactsByList400

export const useDeleteContactsByList = <
	TError = DeleteContactsByList400,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteContactsByList>>,
		TError,
		{ params: DeleteContactsByListParams },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteContactsByList>>,
	TError,
	{ params: DeleteContactsByListParams },
	TContext
> => {
	const mutationOptions = getDeleteContactsByListMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * handles the retrieval of a single contact by id.
 */
export const getContactById = (id: string, signal?: AbortSignal) => {
	return customInstance<GetContactByIdResponseSchema>({
		url: `/contacts/${id}`,
		method: 'GET',
		signal
	})
}

export const getGetContactByIdQueryKey = (id: string) => {
	return [`/contacts/${id}`] as const
}

export const getGetContactByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getContactById>>,
	TError = GetContactById404
>(
	id: string,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactById>>, TError, TData>>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetContactByIdQueryKey(id)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getContactById>>> = ({ signal }) =>
		getContactById(id, signal)

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getContactById>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetContactByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getContactById>>>
export type GetContactByIdQueryError = GetContactById404

export const useGetContactById = <
	TData = Awaited<ReturnType<typeof getContactById>>,
	TError = GetContactById404
>(
	id: string,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactById>>, TError, TData>>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetContactByIdQueryOptions(id, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * modify contact data
 */
export const updateContactById = (id: string, updateContactSchema: UpdateContactSchema) => {
	return customInstance<UpdateContactById200>({
		url: `/contacts/${id}`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: updateContactSchema
	})
}

export const getUpdateContactByIdMutationOptions = <
	TError = UpdateContactById400 | UpdateContactById404,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateContactById>>,
		TError,
		{ id: string; data: UpdateContactSchema },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateContactById>>,
	TError,
	{ id: string; data: UpdateContactSchema },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateContactById>>,
		{ id: string; data: UpdateContactSchema }
	> = props => {
		const { id, data } = props ?? {}

		return updateContactById(id, data)
	}

	return { mutationFn, ...mutationOptions }
}

export type UpdateContactByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateContactById>>
>
export type UpdateContactByIdMutationBody = UpdateContactSchema
export type UpdateContactByIdMutationError = UpdateContactById400 | UpdateContactById404

export const useUpdateContactById = <
	TError = UpdateContactById400 | UpdateContactById404,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateContactById>>,
		TError,
		{ id: string; data: UpdateContactSchema },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof updateContactById>>,
	TError,
	{ id: string; data: UpdateContactSchema },
	TContext
> => {
	const mutationOptions = getUpdateContactByIdMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * handles contact deletion based on id
 */
export const deleteContactById = (id: string) => {
	return customInstance<DeleteContactById200>({ url: `/contacts/${id}`, method: 'DELETE' })
}

export const getDeleteContactByIdMutationOptions = <
	TError = DeleteContactById400 | DeleteContactById404,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteContactById>>,
		TError,
		{ id: string },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteContactById>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteContactById>>,
		{ id: string }
	> = props => {
		const { id } = props ?? {}

		return deleteContactById(id)
	}

	return { mutationFn, ...mutationOptions }
}

export type DeleteContactByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteContactById>>
>

export type DeleteContactByIdMutationError = DeleteContactById400 | DeleteContactById404

export const useDeleteContactById = <
	TError = DeleteContactById400 | DeleteContactById404,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteContactById>>,
		TError,
		{ id: string },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteContactById>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getDeleteContactByIdMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * returns all lists.
 */
export const getContactLists = (params?: GetContactListsParams, signal?: AbortSignal) => {
	return customInstance<GetContactListResponseSchema>({
		url: `/lists`,
		method: 'GET',
		params,
		signal
	})
}

export const getGetContactListsQueryKey = (params?: GetContactListsParams) => {
	return [`/lists`, ...(params ? [params] : [])] as const
}

export const getGetContactListsQueryOptions = <
	TData = Awaited<ReturnType<typeof getContactLists>>,
	TError = unknown
>(
	params?: GetContactListsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactLists>>, TError, TData>>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetContactListsQueryKey(params)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getContactLists>>> = ({ signal }) =>
		getContactLists(params, signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getContactLists>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetContactListsQueryResult = NonNullable<Awaited<ReturnType<typeof getContactLists>>>
export type GetContactListsQueryError = unknown

export const useGetContactLists = <
	TData = Awaited<ReturnType<typeof getContactLists>>,
	TError = unknown
>(
	params?: GetContactListsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactLists>>, TError, TData>>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetContactListsQueryOptions(params, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * handles creation of new list
 */
export const createList = (newContactListSchema: NewContactListSchema) => {
	return customInstance<CreateList200>({
		url: `/lists`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: newContactListSchema
	})
}

export const getCreateListMutationOptions = <TError = CreateList400, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createList>>,
		TError,
		{ data: NewContactListSchema },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof createList>>,
	TError,
	{ data: NewContactListSchema },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createList>>,
		{ data: NewContactListSchema }
	> = props => {
		const { data } = props ?? {}

		return createList(data)
	}

	return { mutationFn, ...mutationOptions }
}

export type CreateListMutationResult = NonNullable<Awaited<ReturnType<typeof createList>>>
export type CreateListMutationBody = NewContactListSchema
export type CreateListMutationError = CreateList400

export const useCreateList = <TError = CreateList400, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createList>>,
		TError,
		{ data: NewContactListSchema },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof createList>>,
	TError,
	{ data: NewContactListSchema },
	TContext
> => {
	const mutationOptions = getCreateListMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * handles the retrieval of a single list by id.
 */
export const getListById = (id: string, signal?: AbortSignal) => {
	return customInstance<GetContactListByIdSchema>({ url: `/lists/${id}`, method: 'GET', signal })
}

export const getGetListByIdQueryKey = (id: string) => {
	return [`/lists/${id}`] as const
}

export const getGetListByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getListById>>,
	TError = GetListById404
>(
	id: string,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getListById>>, TError, TData>>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetListByIdQueryKey(id)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getListById>>> = ({ signal }) =>
		getListById(id, signal)

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getListById>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetListByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getListById>>>
export type GetListByIdQueryError = GetListById404

export const useGetListById = <
	TData = Awaited<ReturnType<typeof getListById>>,
	TError = GetListById404
>(
	id: string,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getListById>>, TError, TData>>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetListByIdQueryOptions(id, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * modify list data
 */
export const updateListById = (id: string, updateContactListSchema: UpdateContactListSchema) => {
	return customInstance<UpdateListById200>({
		url: `/lists/${id}`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: updateContactListSchema
	})
}

export const getUpdateListByIdMutationOptions = <
	TError = UpdateListById400 | UpdateListById404,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateListById>>,
		TError,
		{ id: string; data: UpdateContactListSchema },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateListById>>,
	TError,
	{ id: string; data: UpdateContactListSchema },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateListById>>,
		{ id: string; data: UpdateContactListSchema }
	> = props => {
		const { id, data } = props ?? {}

		return updateListById(id, data)
	}

	return { mutationFn, ...mutationOptions }
}

export type UpdateListByIdMutationResult = NonNullable<Awaited<ReturnType<typeof updateListById>>>
export type UpdateListByIdMutationBody = UpdateContactListSchema
export type UpdateListByIdMutationError = UpdateListById400 | UpdateListById404

export const useUpdateListById = <
	TError = UpdateListById400 | UpdateListById404,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateListById>>,
		TError,
		{ id: string; data: UpdateContactListSchema },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof updateListById>>,
	TError,
	{ id: string; data: UpdateContactListSchema },
	TContext
> => {
	const mutationOptions = getUpdateListByIdMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * handles list deletion based on id
 */
export const deleteListById = (id: string) => {
	return customInstance<DeleteListById200>({ url: `/lists/${id}`, method: 'DELETE' })
}

export const getDeleteListByIdMutationOptions = <
	TError = DeleteListById400 | DeleteListById404,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteListById>>,
		TError,
		{ id: string },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteListById>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteListById>>,
		{ id: string }
	> = props => {
		const { id } = props ?? {}

		return deleteListById(id)
	}

	return { mutationFn, ...mutationOptions }
}

export type DeleteListByIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteListById>>>

export type DeleteListByIdMutationError = DeleteListById400 | DeleteListById404

export const useDeleteListById = <
	TError = DeleteListById400 | DeleteListById404,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteListById>>,
		TError,
		{ id: string },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteListById>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getDeleteListByIdMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * returns all campaigns.
 */
export const getCampaigns = (params?: GetCampaignsParams, signal?: AbortSignal) => {
	return customInstance<GetCampaignResponseSchema>({
		url: `/campaigns`,
		method: 'GET',
		params,
		signal
	})
}

export const getGetCampaignsQueryKey = (params?: GetCampaignsParams) => {
	return [`/campaigns`, ...(params ? [params] : [])] as const
}

export const getGetCampaignsQueryOptions = <
	TData = Awaited<ReturnType<typeof getCampaigns>>,
	TError = unknown
>(
	params?: GetCampaignsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCampaigns>>, TError, TData>>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetCampaignsQueryKey(params)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getCampaigns>>> = ({ signal }) =>
		getCampaigns(params, signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getCampaigns>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetCampaignsQueryResult = NonNullable<Awaited<ReturnType<typeof getCampaigns>>>
export type GetCampaignsQueryError = unknown

export const useGetCampaigns = <TData = Awaited<ReturnType<typeof getCampaigns>>, TError = unknown>(
	params?: GetCampaignsParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCampaigns>>, TError, TData>>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetCampaignsQueryOptions(params, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * handles creation of new campaign
 */
export const createCampaign = (newCampaignSchema: NewCampaignSchema) => {
	return customInstance<CreateCampaign200>({
		url: `/campaigns`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: newCampaignSchema
	})
}

export const getCreateCampaignMutationOptions = <
	TError = CreateCampaign400,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createCampaign>>,
		TError,
		{ data: NewCampaignSchema },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof createCampaign>>,
	TError,
	{ data: NewCampaignSchema },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createCampaign>>,
		{ data: NewCampaignSchema }
	> = props => {
		const { data } = props ?? {}

		return createCampaign(data)
	}

	return { mutationFn, ...mutationOptions }
}

export type CreateCampaignMutationResult = NonNullable<Awaited<ReturnType<typeof createCampaign>>>
export type CreateCampaignMutationBody = NewCampaignSchema
export type CreateCampaignMutationError = CreateCampaign400

export const useCreateCampaign = <TError = CreateCampaign400, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createCampaign>>,
		TError,
		{ data: NewCampaignSchema },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof createCampaign>>,
	TError,
	{ data: NewCampaignSchema },
	TContext
> => {
	const mutationOptions = getCreateCampaignMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * handles the retrieval of a single campaign by id.
 */
export const getCampaignById = (id: string, signal?: AbortSignal) => {
	return customInstance<GetCampaignByIdResponseSchema>({
		url: `/campaigns/${id}`,
		method: 'GET',
		signal
	})
}

export const getGetCampaignByIdQueryKey = (id: string) => {
	return [`/campaigns/${id}`] as const
}

export const getGetCampaignByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getCampaignById>>,
	TError = GetCampaignById404
>(
	id: string,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCampaignById>>, TError, TData>>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetCampaignByIdQueryKey(id)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getCampaignById>>> = ({ signal }) =>
		getCampaignById(id, signal)

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getCampaignById>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetCampaignByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCampaignById>>>
export type GetCampaignByIdQueryError = GetCampaignById404

export const useGetCampaignById = <
	TData = Awaited<ReturnType<typeof getCampaignById>>,
	TError = GetCampaignById404
>(
	id: string,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCampaignById>>, TError, TData>>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetCampaignByIdQueryOptions(id, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * modify campaign data
 */
export const updateCampaignById = (id: string, updateCampaignSchema: UpdateCampaignSchema) => {
	return customInstance<UpdateCampaignById200>({
		url: `/campaigns/${id}`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: updateCampaignSchema
	})
}

export const getUpdateCampaignByIdMutationOptions = <
	TError = UpdateCampaignById400 | UpdateCampaignById404,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateCampaignById>>,
		TError,
		{ id: string; data: UpdateCampaignSchema },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateCampaignById>>,
	TError,
	{ id: string; data: UpdateCampaignSchema },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateCampaignById>>,
		{ id: string; data: UpdateCampaignSchema }
	> = props => {
		const { id, data } = props ?? {}

		return updateCampaignById(id, data)
	}

	return { mutationFn, ...mutationOptions }
}

export type UpdateCampaignByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateCampaignById>>
>
export type UpdateCampaignByIdMutationBody = UpdateCampaignSchema
export type UpdateCampaignByIdMutationError = UpdateCampaignById400 | UpdateCampaignById404

export const useUpdateCampaignById = <
	TError = UpdateCampaignById400 | UpdateCampaignById404,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateCampaignById>>,
		TError,
		{ id: string; data: UpdateCampaignSchema },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof updateCampaignById>>,
	TError,
	{ id: string; data: UpdateCampaignSchema },
	TContext
> => {
	const mutationOptions = getUpdateCampaignByIdMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * handles campaign deletion based on id
 */
export const deleteCampaignById = (id: string) => {
	return customInstance<DeleteCampaignById200>({ url: `/campaigns/${id}`, method: 'DELETE' })
}

export const getDeleteCampaignByIdMutationOptions = <
	TError = DeleteCampaignById400 | DeleteCampaignById404,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteCampaignById>>,
		TError,
		{ id: string },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteCampaignById>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteCampaignById>>,
		{ id: string }
	> = props => {
		const { id } = props ?? {}

		return deleteCampaignById(id)
	}

	return { mutationFn, ...mutationOptions }
}

export type DeleteCampaignByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteCampaignById>>
>

export type DeleteCampaignByIdMutationError = DeleteCampaignById400 | DeleteCampaignById404

export const useDeleteCampaignById = <
	TError = DeleteCampaignById400 | DeleteCampaignById404,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteCampaignById>>,
		TError,
		{ id: string },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteCampaignById>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getDeleteCampaignByIdMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * returns all conversations.
 */
export const getConversations = (params?: GetConversationsParams, signal?: AbortSignal) => {
	return customInstance<GetConversations200>({
		url: `/conversations`,
		method: 'GET',
		params,
		signal
	})
}

export const getGetConversationsQueryKey = (params?: GetConversationsParams) => {
	return [`/conversations`, ...(params ? [params] : [])] as const
}

export const getGetConversationsQueryOptions = <
	TData = Awaited<ReturnType<typeof getConversations>>,
	TError = unknown
>(
	params?: GetConversationsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getConversations>>, TError, TData>
		>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetConversationsQueryKey(params)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getConversations>>> = ({ signal }) =>
		getConversations(params, signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getConversations>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetConversationsQueryResult = NonNullable<Awaited<ReturnType<typeof getConversations>>>
export type GetConversationsQueryError = unknown

export const useGetConversations = <
	TData = Awaited<ReturnType<typeof getConversations>>,
	TError = unknown
>(
	params?: GetConversationsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getConversations>>, TError, TData>
		>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetConversationsQueryOptions(params, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * returns all messages.
 */
export const getMessages = (params?: GetMessagesParams, signal?: AbortSignal) => {
	return customInstance<GetMessages200>({ url: `/messages`, method: 'GET', params, signal })
}

export const getGetMessagesQueryKey = (params?: GetMessagesParams) => {
	return [`/messages`, ...(params ? [params] : [])] as const
}

export const getGetMessagesQueryOptions = <
	TData = Awaited<ReturnType<typeof getMessages>>,
	TError = unknown
>(
	params?: GetMessagesParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMessages>>, TError, TData>>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetMessagesQueryKey(params)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getMessages>>> = ({ signal }) =>
		getMessages(params, signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getMessages>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof getMessages>>>
export type GetMessagesQueryError = unknown

export const useGetMessages = <TData = Awaited<ReturnType<typeof getMessages>>, TError = unknown>(
	params?: GetMessagesParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMessages>>, TError, TData>>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetMessagesQueryOptions(params, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

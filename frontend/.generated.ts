/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Wapikit
 * The API collection for WapiKit
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult
} from '@tanstack/react-query'
import { customInstance } from './src/utils/api-client'
export type DeleteSubscriberById200 = {
	data?: boolean
}

export type UpdateContactById200 = {
	data?: ContactSchema
}

export type GetContactById200 = {
	data?: ContactSchema
}

export type DeleteSubscriberByList200 = {
	data?: boolean
}

export type DeleteSubscriberByListParams = {
	/**
	 * subscriber id/s to be deleted
	 */
	id: string
}

export type CreateContact200 = {
	data?: ContactSchema
}

export type GetSubscribers200Data = {
	page?: number
	per_page?: number
	query?: string
	results?: ContactSchema[]
	total?: number
}

export type GetSubscribers200 = {
	data?: GetSubscribers200Data
}

export type GetSubscribersParams = {
	/**
	 * number of records to skip
	 */
	page?: number
	/**
	 * max number of records to return per page
	 */
	per_page?: number
	/**
	 * query subscribers with an SQL expression.
	 */
	query?: string
}

export type DeleteSubscriberById200 = {
	data?: boolean
}

export type UpdateSubscriberById200Data = {
	created_at?: string
	email?: string
	id?: number
	name?: string
	phone?: string
	updated_at?: string
}

export type UpdateSubscriberById200 = {
	data?: UpdateSubscriberById200Data
}

export type UpdateSubscriberByIdBody = {
	email: string
	name: string
	phone: string
}

export type GetSubscriberById200Data = {
	created_at?: string
	email?: string
	id?: number
	name?: string
	phone?: string
	updated_at?: string
}

export type GetSubscriberById200 = {
	data?: GetSubscriberById200Data
}

export type UpdateUser200Data = {
	created_at?: string
	email?: string
	id?: number
	updated_at?: string
	username?: string
}

export type UpdateUser200 = {
	data?: UpdateUser200Data
}

export type UpdateUserBody = {
	email: string
	password: string
	username: string
}

export type CreateUser200Data = {
	created_at?: string
	email?: string
	id?: number
	updated_at?: string
	username?: string
}

export type CreateUser200 = {
	data?: CreateUser200Data
}

export type CreateUserBody = {
	email: string
	password: string
	username: string
}

export type GetAllOrganizationMembers200Data = {
	created_at?: string
	email?: string
	id?: number
	updated_at?: string
	username?: string
}

export type GetAllOrganizationMembers200 = {
	data?: GetAllOrganizationMembers200Data
}

export type Login404 = {
	message?: string
}

export type Login400 = {
	message?: string
}

export type GetHealthCheck200 = {
	data?: boolean
}

export type UpdateContactSchemaAttributes = { [key: string]: any }

export interface UpdateContactSchema {
	attributes?: UpdateContactSchemaAttributes
	name?: string
	phone?: string
}

export type NewContactSchemaAttributes = { [key: string]: any }

export interface NewContactSchema {
	attributes?: NewContactSchemaAttributes
	name?: string
	phone?: string
}

export type ContactSchemaAttributes = { [key: string]: any }

export interface ContactSchema {
	attributes?: ContactSchemaAttributes
	created_at?: string
	name?: string
	phone?: string
	uniqueId?: number
	updated_at?: string
}

export interface LoginResponseBodySchema {
	token?: string
}

export interface LoginRequestBodySchema {
	password: string
	username: string
}

/**
 * healthcheck endpoint
 */
export const getHealthCheck = (signal?: AbortSignal) => {
	return customInstance<GetHealthCheck200>({ url: `/health-check`, method: 'GET', signal })
}

export const getGetHealthCheckQueryKey = () => {
	return [`/health-check`] as const
}

export const getGetHealthCheckQueryOptions = <
	TData = Awaited<ReturnType<typeof getHealthCheck>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthCheck>>, TError, TData>>
}) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetHealthCheckQueryKey()

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealthCheck>>> = ({ signal }) =>
		getHealthCheck(signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getHealthCheck>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetHealthCheckQueryResult = NonNullable<Awaited<ReturnType<typeof getHealthCheck>>>
export type GetHealthCheckQueryError = unknown

export const useGetHealthCheck = <
	TData = Awaited<ReturnType<typeof getHealthCheck>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthCheck>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetHealthCheckQueryOptions(options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * login endpoint
 */
export const login = (loginRequestBodySchema: LoginRequestBodySchema) => {
	return customInstance<LoginResponseBodySchema>({
		url: `/login`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: loginRequestBodySchema
	})
}

export const getLoginMutationOptions = <
	TError = Login400 | Login404,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof login>>,
		TError,
		{ data: LoginRequestBodySchema },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof login>>,
	TError,
	{ data: LoginRequestBodySchema },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof login>>,
		{ data: LoginRequestBodySchema }
	> = props => {
		const { data } = props ?? {}

		return login(data)
	}

	return { mutationFn, ...mutationOptions }
}

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
export type LoginMutationBody = LoginRequestBodySchema
export type LoginMutationError = Login400 | Login404

export const useLogin = <TError = Login400 | Login404, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof login>>,
		TError,
		{ data: LoginRequestBodySchema },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof login>>,
	TError,
	{ data: LoginRequestBodySchema },
	TContext
> => {
	const mutationOptions = getLoginMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * returns all the organization members
 */
export const getAllOrganizationMembers = (signal?: AbortSignal) => {
	return customInstance<GetAllOrganizationMembers200>({ url: `/members`, method: 'GET', signal })
}

export const getGetAllOrganizationMembersQueryKey = () => {
	return [`/members`] as const
}

export const getGetAllOrganizationMembersQueryOptions = <
	TData = Awaited<ReturnType<typeof getAllOrganizationMembers>>,
	TError = unknown
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getAllOrganizationMembers>>, TError, TData>
	>
}) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetAllOrganizationMembersQueryKey()

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllOrganizationMembers>>> = ({
		signal
	}) => getAllOrganizationMembers(signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getAllOrganizationMembers>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetAllOrganizationMembersQueryResult = NonNullable<
	Awaited<ReturnType<typeof getAllOrganizationMembers>>
>
export type GetAllOrganizationMembersQueryError = unknown

export const useGetAllOrganizationMembers = <
	TData = Awaited<ReturnType<typeof getAllOrganizationMembers>>,
	TError = unknown
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getAllOrganizationMembers>>, TError, TData>
	>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetAllOrganizationMembersQueryOptions(options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * create a new user
 */
export const createUser = (createUserBody: CreateUserBody) => {
	return customInstance<CreateUser200>({
		url: `/members`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: createUserBody
	})
}

export const getCreateUserMutationOptions = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createUser>>,
		TError,
		{ data: CreateUserBody },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof createUser>>,
	TError,
	{ data: CreateUserBody },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createUser>>,
		{ data: CreateUserBody }
	> = props => {
		const { data } = props ?? {}

		return createUser(data)
	}

	return { mutationFn, ...mutationOptions }
}

export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
export type CreateUserMutationBody = CreateUserBody
export type CreateUserMutationError = unknown

export const useCreateUser = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createUser>>,
		TError,
		{ data: CreateUserBody },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof createUser>>,
	TError,
	{ data: CreateUserBody },
	TContext
> => {
	const mutationOptions = getCreateUserMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * modify user data
 */
export const updateUser = (updateUserBody: UpdateUserBody) => {
	return customInstance<UpdateUser200>({
		url: `/members`,
		method: 'PUT',
		headers: { 'Content-Type': 'application/json' },
		data: updateUserBody
	})
}

export const getUpdateUserMutationOptions = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateUser>>,
		TError,
		{ data: UpdateUserBody },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateUser>>,
	TError,
	{ data: UpdateUserBody },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateUser>>,
		{ data: UpdateUserBody }
	> = props => {
		const { data } = props ?? {}

		return updateUser(data)
	}

	return { mutationFn, ...mutationOptions }
}

export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
export type UpdateUserMutationBody = UpdateUserBody
export type UpdateUserMutationError = unknown

export const useUpdateUser = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateUser>>,
		TError,
		{ data: UpdateUserBody },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof updateUser>>,
	TError,
	{ data: UpdateUserBody },
	TContext
> => {
	const mutationOptions = getUpdateUserMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * handles the retrieval of a single subscriber by ID.
 */
export const getSubscriberById = (id: number, signal?: AbortSignal) => {
	return customInstance<GetSubscriberById200>({ url: `/member/${id}`, method: 'GET', signal })
}

export const getGetSubscriberByIdQueryKey = (id: number) => {
	return [`/member/${id}`] as const
}

export const getGetSubscriberByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getSubscriberById>>,
	TError = unknown
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getSubscriberById>>, TError, TData>
		>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetSubscriberByIdQueryKey(id)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubscriberById>>> = ({ signal }) =>
		getSubscriberById(id, signal)

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getSubscriberById>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetSubscriberByIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getSubscriberById>>
>
export type GetSubscriberByIdQueryError = unknown

export const useGetSubscriberById = <
	TData = Awaited<ReturnType<typeof getSubscriberById>>,
	TError = unknown
>(
	id: number,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getSubscriberById>>, TError, TData>
		>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetSubscriberByIdQueryOptions(id, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * modify subscriber data
 */
export const updateSubscriberById = (
	id: number,
	updateSubscriberByIdBody: UpdateSubscriberByIdBody
) => {
	return customInstance<UpdateSubscriberById200>({
		url: `/member/${id}`,
		method: 'PUT',
		headers: { 'Content-Type': 'application/json' },
		data: updateSubscriberByIdBody
	})
}

export const getUpdateSubscriberByIdMutationOptions = <
	TError = unknown,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateSubscriberById>>,
		TError,
		{ id: number; data: UpdateSubscriberByIdBody },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateSubscriberById>>,
	TError,
	{ id: number; data: UpdateSubscriberByIdBody },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateSubscriberById>>,
		{ id: number; data: UpdateSubscriberByIdBody }
	> = props => {
		const { id, data } = props ?? {}

		return updateSubscriberById(id, data)
	}

	return { mutationFn, ...mutationOptions }
}

export type UpdateSubscriberByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateSubscriberById>>
>
export type UpdateSubscriberByIdMutationBody = UpdateSubscriberByIdBody
export type UpdateSubscriberByIdMutationError = unknown

export const useUpdateSubscriberById = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateSubscriberById>>,
		TError,
		{ id: number; data: UpdateSubscriberByIdBody },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof updateSubscriberById>>,
	TError,
	{ id: number; data: UpdateSubscriberByIdBody },
	TContext
> => {
	const mutationOptions = getUpdateSubscriberByIdMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * handles contact deletion based on id
 */
export const deleteSubscriberById = (id: number) => {
	return customInstance<DeleteSubscriberById200>({ url: `/contacts/${id}`, method: 'DELETE' })
}

export const getDeleteSubscriberByIdMutationOptions = <
	TError = unknown,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteSubscriberById>>,
		TError,
		{ id: number },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteSubscriberById>>,
	TError,
	{ id: number },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteSubscriberById>>,
		{ id: number }
	> = props => {
		const { id } = props ?? {}

		return deleteSubscriberById(id)
	}

	return { mutationFn, ...mutationOptions }
}

export type DeleteSubscriberByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteSubscriberById>>
>

export type DeleteSubscriberByIdMutationError = unknown

export const useDeleteSubscriberById = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteSubscriberById>>,
		TError,
		{ id: number },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteSubscriberById>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getDeleteSubscriberByIdMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * returns all subscribers.
 */
export const getSubscribers = (params?: GetSubscribersParams, signal?: AbortSignal) => {
	return customInstance<GetSubscribers200>({ url: `/contacts`, method: 'GET', params, signal })
}

export const getGetSubscribersQueryKey = (params?: GetSubscribersParams) => {
	return [`/contacts`, ...(params ? [params] : [])] as const
}

export const getGetSubscribersQueryOptions = <
	TData = Awaited<ReturnType<typeof getSubscribers>>,
	TError = unknown
>(
	params?: GetSubscribersParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubscribers>>, TError, TData>>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetSubscribersQueryKey(params)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubscribers>>> = ({ signal }) =>
		getSubscribers(params, signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getSubscribers>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetSubscribersQueryResult = NonNullable<Awaited<ReturnType<typeof getSubscribers>>>
export type GetSubscribersQueryError = unknown

export const useGetSubscribers = <
	TData = Awaited<ReturnType<typeof getSubscribers>>,
	TError = unknown
>(
	params?: GetSubscribersParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubscribers>>, TError, TData>>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetSubscribersQueryOptions(params, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * handles creation of new contact
 */
export const createContact = (newContactSchema: NewContactSchema) => {
	return customInstance<CreateContact200>({
		url: `/contacts`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: newContactSchema
	})
}

export const getCreateContactMutationOptions = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createContact>>,
		TError,
		{ data: NewContactSchema },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof createContact>>,
	TError,
	{ data: NewContactSchema },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createContact>>,
		{ data: NewContactSchema }
	> = props => {
		const { data } = props ?? {}

		return createContact(data)
	}

	return { mutationFn, ...mutationOptions }
}

export type CreateContactMutationResult = NonNullable<Awaited<ReturnType<typeof createContact>>>
export type CreateContactMutationBody = NewContactSchema
export type CreateContactMutationError = unknown

export const useCreateContact = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createContact>>,
		TError,
		{ data: NewContactSchema },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof createContact>>,
	TError,
	{ data: NewContactSchema },
	TContext
> => {
	const mutationOptions = getCreateContactMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * handles subscribers deletion
 */
export const deleteSubscriberByList = (params: DeleteSubscriberByListParams) => {
	return customInstance<DeleteSubscriberByList200>({ url: `/contacts`, method: 'DELETE', params })
}

export const getDeleteSubscriberByListMutationOptions = <
	TError = unknown,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteSubscriberByList>>,
		TError,
		{ params: DeleteSubscriberByListParams },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteSubscriberByList>>,
	TError,
	{ params: DeleteSubscriberByListParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteSubscriberByList>>,
		{ params: DeleteSubscriberByListParams }
	> = props => {
		const { params } = props ?? {}

		return deleteSubscriberByList(params)
	}

	return { mutationFn, ...mutationOptions }
}

export type DeleteSubscriberByListMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteSubscriberByList>>
>

export type DeleteSubscriberByListMutationError = unknown

export const useDeleteSubscriberByList = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteSubscriberByList>>,
		TError,
		{ params: DeleteSubscriberByListParams },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteSubscriberByList>>,
	TError,
	{ params: DeleteSubscriberByListParams },
	TContext
> => {
	const mutationOptions = getDeleteSubscriberByListMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * handles the retrieval of a single contact by id.
 */
export const getContactById = (id: number, signal?: AbortSignal) => {
	return customInstance<GetContactById200>({ url: `/contacts/${id}`, method: 'GET', signal })
}

export const getGetContactByIdQueryKey = (id: number) => {
	return [`/contacts/${id}`] as const
}

export const getGetContactByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getContactById>>,
	TError = unknown
>(
	id: number,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactById>>, TError, TData>>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetContactByIdQueryKey(id)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getContactById>>> = ({ signal }) =>
		getContactById(id, signal)

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getContactById>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetContactByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getContactById>>>
export type GetContactByIdQueryError = unknown

export const useGetContactById = <
	TData = Awaited<ReturnType<typeof getContactById>>,
	TError = unknown
>(
	id: number,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactById>>, TError, TData>>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetContactByIdQueryOptions(id, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * modify contact data
 */
export const updateContactById = (id: number, updateContactSchema: UpdateContactSchema) => {
	return customInstance<UpdateContactById200>({
		url: `/contacts/${id}`,
		method: 'PUT',
		headers: { 'Content-Type': 'application/json' },
		data: updateContactSchema
	})
}

export const getUpdateContactByIdMutationOptions = <
	TError = unknown,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateContactById>>,
		TError,
		{ id: number; data: UpdateContactSchema },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateContactById>>,
	TError,
	{ id: number; data: UpdateContactSchema },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateContactById>>,
		{ id: number; data: UpdateContactSchema }
	> = props => {
		const { id, data } = props ?? {}

		return updateContactById(id, data)
	}

	return { mutationFn, ...mutationOptions }
}

export type UpdateContactByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateContactById>>
>
export type UpdateContactByIdMutationBody = UpdateContactSchema
export type UpdateContactByIdMutationError = unknown

export const useUpdateContactById = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateContactById>>,
		TError,
		{ id: number; data: UpdateContactSchema },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof updateContactById>>,
	TError,
	{ id: number; data: UpdateContactSchema },
	TContext
> => {
	const mutationOptions = getUpdateContactByIdMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Wapikit
 * The API collection for WapiKit
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult
} from '@tanstack/react-query'
import { customInstance } from './src/utils/api-client'
export type DeleteSubscriberById200 = {
	data?: boolean
}

export type UpdateContactById200 = {
	data?: Contact
}

export type GetContactById200 = {
	data?: Contact
}

export type DeleteSubscriberByList200 = {
	data?: boolean
}

export type DeleteSubscriberByListParams = {
	/**
	 * subscriber id/s to be deleted
	 */
	id: string
}

export type CreateContact200 = {
	data?: Contact
}

export type GetSubscribers200Data = {
	page?: number
	per_page?: number
	query?: string
	results?: Contact[]
	total?: number
}

export type GetSubscribers200 = {
	data?: GetSubscribers200Data
}

export type GetSubscribersParams = {
	/**
	 * number of records to skip
	 */
	page?: number
	/**
	 * max number of records to return per page
	 */
	per_page?: number
	/**
	 * query subscribers with an SQL expression.
	 */
	query?: string
}

export type GetHealthCheck200 = {
	data?: boolean
}

export type UpdateContactDataAttributes = { [key: string]: any }

export type UpdateContactData = {
	attributes?: UpdateContactDataAttributes
	name?: string
	phone?: string
}

export interface UpdateContact {
	data?: UpdateContactData
}

export type NewContactDataAttributes = { [key: string]: any }

export type NewContactData = {
	attributes?: NewContactDataAttributes
	name?: string
	phone?: string
}

export interface NewContact {
	data?: NewContactData
}

export type ContactDataAttributes = { [key: string]: any }

export type ContactData = {
	attributes?: ContactDataAttributes
	created_at?: string
	id?: number
	name?: string
	phone?: string
	updated_at?: string
}

export interface Contact {
	data?: ContactData
}

export type ServerConfigDataLangsItem = {
	code?: string
	name?: string
}

export type ServerConfigData = {
	lang?: string
	langs?: ServerConfigDataLangsItem[]
	needs_restart?: boolean
	update?: string
	version?: string
	whatsappAccounts?: string[]
}

export interface ServerConfig {
	data?: ServerConfigData
}

export type LanguagePackData = {
	'_.code'?: string
	'_.name'?: string
	'admin.errorMarshallingConfig'?: string
	'analytics.count'?: string
	'analytics.fromDate'?: string
	'analytics.invalidDates'?: string
	'analytics.isUnique'?: string
	'analytics.links'?: string
	'analytics.nonUnique'?: string
	'analytics.title'?: string
	'analytics.toDate'?: string
	'bounces.source'?: string
	'bounces.unknownService'?: string
	'bounces.view'?: string
	'campaigns.addAltText'?: string
	'campaigns.archive'?: string
	'campaigns.archiveEnable'?: string
	'campaigns.archiveHelp'?: string
	'campaigns.archiveMeta'?: string
	'campaigns.archiveMetaHelp'?: string
	'campaigns.cantUpdate'?: string
	'campaigns.clicks'?: string
	'campaigns.confirmDelete'?: string
	'campaigns.confirmSchedule'?: string
	'campaigns.confirmSwitchFormat'?: string
	'campaigns.content'?: string
	'campaigns.contentHelp'?: string
	'campaigns.continue'?: string
	'campaigns.copyOf'?: string
	'campaigns.customHeadersHelp'?: string
	'campaigns.dateAndTime'?: string
	'campaigns.ended'?: string
	'campaigns.errorSendTest'?: string
	'campaigns.fieldInvalidBody'?: string
	'campaigns.fieldInvalidFromEmail'?: string
	'campaigns.fieldInvalidListIDs'?: string
	'campaigns.fieldInvalidMessenger'?: string
	'campaigns.fieldInvalidName'?: string
	'campaigns.fieldInvalidSendAt'?: string
	'campaigns.fieldInvalidSubject'?: string
	'campaigns.formatHTML'?: string
	'campaigns.fromAddress'?: string
	'campaigns.fromAddressPlaceholder'?: string
	'campaigns.invalid'?: string
	'campaigns.invalidCustomHeaders'?: string
	'campaigns.markdown'?: string
	'campaigns.needsSendAt'?: string
	'campaigns.newCampaign'?: string
	'campaigns.noKnownSubsToTest'?: string
	'campaigns.noOptinLists'?: string
	'campaigns.noSubs'?: string
	'campaigns.noSubsToTest'?: string
	'campaigns.notFound'?: string
	'campaigns.onlyActiveCancel'?: string
	'campaigns.onlyActivePause'?: string
	'campaigns.onlyDraftAsScheduled'?: string
	'campaigns.onlyPausedDraft'?: string
	'campaigns.onlyScheduledAsDraft'?: string
	'campaigns.pause'?: string
	'campaigns.plainText'?: string
	'campaigns.preview'?: string
	'campaigns.progress'?: string
	'campaigns.queryPlaceholder'?: string
	'campaigns.rateMinuteShort'?: string
	'campaigns.rawHTML'?: string
	'campaigns.removeAltText'?: string
	'campaigns.richText'?: string
	'campaigns.schedule'?: string
	'campaigns.scheduled'?: string
	'campaigns.send'?: string
	'campaigns.sendLater'?: string
	'campaigns.sendTest'?: string
	'campaigns.sendTestHelp'?: string
	'campaigns.sendToLists'?: string
	'campaigns.sent'?: string
	'campaigns.start'?: string
	'campaigns.started'?: string
	'campaigns.startedAt'?: string
	'campaigns.stats'?: string
	'campaigns.status.cancelled'?: string
	'campaigns.status.draft'?: string
	'campaigns.status.finished'?: string
	'campaigns.status.paused'?: string
	'campaigns.status.running'?: string
	'campaigns.status.scheduled'?: string
	'campaigns.statusChanged'?: string
	'campaigns.subject'?: string
	'campaigns.testEmails'?: string
	'campaigns.testSent'?: string
	'campaigns.timestamps'?: string
	'campaigns.trackLink'?: string
	'campaigns.views'?: string
	'dashboard.campaignViews'?: string
	'dashboard.linkClicks'?: string
	'dashboard.messagesSent'?: string
	'dashboard.orphanSubs'?: string
	'email.data.info'?: string
	'email.data.title'?: string
	'email.optin.confirmSub'?: string
	'email.optin.confirmSubHelp'?: string
	'email.optin.confirmSubInfo'?: string
	'email.optin.confirmSubTitle'?: string
	'email.optin.confirmSubWelcome'?: string
	'email.optin.privateList'?: string
	'email.status.campaignReason'?: string
	'email.status.campaignSent'?: string
	'email.status.campaignUpdateTitle'?: string
	'email.status.importFile'?: string
	'email.status.importRecords'?: string
	'email.status.importTitle'?: string
	'email.status.status'?: string
	'email.unsub'?: string
	'email.unsubHelp'?: string
	'email.viewInBrowser'?: string
	'forms.formHTML'?: string
	'forms.formHTMLHelp'?: string
	'forms.noPublicLists'?: string
	'forms.publicLists'?: string
	'forms.publicSubPage'?: string
	'forms.selectHelp'?: string
	'forms.title'?: string
	'globals.buttons.add'?: string
	'globals.buttons.addNew'?: string
	'globals.buttons.back'?: string
	'globals.buttons.cancel'?: string
	'globals.buttons.clone'?: string
	'globals.buttons.close'?: string
	'globals.buttons.continue'?: string
	'globals.buttons.delete'?: string
	'globals.buttons.deleteAll'?: string
	'globals.buttons.edit'?: string
	'globals.buttons.enabled'?: string
	'globals.buttons.insert'?: string
	'globals.buttons.learnMore'?: string
	'globals.buttons.more'?: string
	'globals.buttons.new'?: string
	'globals.buttons.ok'?: string
	'globals.buttons.remove'?: string
	'globals.buttons.save'?: string
	'globals.buttons.saveChanges'?: string
	'globals.days.0'?: string
	'globals.days.1'?: string
	'globals.days.2'?: string
	'globals.days.3'?: string
	'globals.days.4'?: string
	'globals.days.5'?: string
	'globals.days.6'?: string
	'globals.days.7'?: string
	'globals.fields.createdAt'?: string
	'globals.fields.description'?: string
	'globals.fields.id'?: string
	'globals.fields.name'?: string
	'globals.fields.status'?: string
	'globals.fields.type'?: string
	'globals.fields.updatedAt'?: string
	'globals.fields.uuid'?: string
	'globals.messages.confirm'?: string
	'globals.messages.confirmDiscard'?: string
	'globals.messages.created'?: string
	'globals.messages.deleted'?: string
	'globals.messages.deletedCount'?: string
	'globals.messages.done'?: string
	'globals.messages.emptyState'?: string
	'globals.messages.errorCreating'?: string
	'globals.messages.errorDeleting'?: string
	'globals.messages.errorFetching'?: string
	'globals.messages.errorInvalidIDs'?: string
	'globals.messages.errorUpdating'?: string
	'globals.messages.errorUUID'?: string
	'globals.messages.internalError'?: string
	'globals.messages.invalidData'?: string
	'globals.messages.invalidID'?: string
	'globals.messages.invalidUUID'?: string
	'globals.messages.missingFields'?: string
	'globals.messages.notFound'?: string
	'globals.messages.passwordChange'?: string
	'globals.messages.updated'?: string
	'globals.months.1'?: string
	'globals.months.10'?: string
	'globals.months.11'?: string
	'globals.months.12'?: string
	'globals.months.2'?: string
	'globals.months.3'?: string
	'globals.months.4'?: string
	'globals.months.5'?: string
	'globals.months.6'?: string
	'globals.months.7'?: string
	'globals.months.8'?: string
	'globals.months.9'?: string
	'globals.states.off'?: string
	'globals.terms.all'?: string
	'globals.terms.analytics'?: string
	'globals.terms.bounce'?: string
	'globals.terms.bounces'?: string
	'globals.terms.campaign'?: string
	'globals.terms.campaigns'?: string
	'globals.terms.dashboard'?: string
	'globals.terms.day'?: string
	'globals.terms.hour'?: string
	'globals.terms.list'?: string
	'globals.terms.lists'?: string
	'globals.terms.media'?: string
	'globals.terms.messenger'?: string
	'globals.terms.messengers'?: string
	'globals.terms.minute'?: string
	'globals.terms.month'?: string
	'globals.terms.second'?: string
	'globals.terms.settings'?: string
	'globals.terms.subscriber'?: string
	'globals.terms.subscribers'?: string
	'globals.terms.subscriptions'?: string
	'globals.terms.tag'?: string
	'globals.terms.tags'?: string
	'globals.terms.template'?: string
	'globals.terms.templates'?: string
	'globals.terms.tx'?: string
	'globals.terms.year'?: string
	'import.alreadyRunning'?: string
	'import.blocklist'?: string
	'import.csvDelim'?: string
	'import.csvDelimHelp'?: string
	'import.csvExample'?: string
	'import.csvFile'?: string
	'import.csvFileHelp'?: string
	'import.errorCopyingFile'?: string
	'import.errorProcessingZIP'?: string
	'import.errorStarting'?: string
	'import.importDone'?: string
	'import.importStarted'?: string
	'import.instructions'?: string
	'import.instructionsHelp'?: string
	'import.invalidDelim'?: string
	'import.invalidFile'?: string
	'import.invalidMode'?: string
	'import.invalidParams'?: string
	'import.invalidSubStatus'?: string
	'import.listSubHelp'?: string
	'import.mode'?: string
	'import.overwrite'?: string
	'import.overwriteHelp'?: string
	'import.recordsCount'?: string
	'import.stopImport'?: string
	'import.subscribe'?: string
	'import.title'?: string
	'import.upload'?: string
	'lists.confirmDelete'?: string
	'lists.confirmSub'?: string
	'lists.invalidName'?: string
	'lists.newList'?: string
	'lists.optin'?: string
	'lists.optinHelp'?: string
	'lists.optins.double'?: string
	'lists.optins.single'?: string
	'lists.optinTo'?: string
	'lists.sendCampaign'?: string
	'lists.sendOptinCampaign'?: string
	'lists.type'?: string
	'lists.typeHelp'?: string
	'lists.types.private'?: string
	'lists.types.public'?: string
	'logs.title'?: string
	'maintenance.help'?: string
	'maintenance.maintenance.unconfirmedOptins'?: string
	'maintenance.olderThan'?: string
	'maintenance.title'?: string
	'maintenance.unconfirmedSubs'?: string
	'media.errorReadingFile'?: string
	'media.errorResizing'?: string
	'media.errorSavingThumbnail'?: string
	'media.errorUploading'?: string
	'media.invalidFile'?: string
	'media.title'?: string
	'media.unsupportedFileType'?: string
	'media.upload'?: string
	'media.uploadHelp'?: string
	'media.uploadImage'?: string
	'menu.allCampaigns'?: string
	'menu.allLists'?: string
	'menu.allSubscribers'?: string
	'menu.dashboard'?: string
	'menu.forms'?: string
	'menu.import'?: string
	'menu.logs'?: string
	'menu.maintenance'?: string
	'menu.media'?: string
	'menu.newCampaign'?: string
	'menu.settings'?: string
	'public.archiveEmpty'?: string
	'public.archiveTitle'?: string
	'public.blocklisted'?: string
	'public.campaignNotFound'?: string
	'public.confirmOptinSubTitle'?: string
	'public.confirmSub'?: string
	'public.confirmSubInfo'?: string
	'public.confirmSubTitle'?: string
	'public.dataRemoved'?: string
	'public.dataRemovedTitle'?: string
	'public.dataSent'?: string
	'public.dataSentTitle'?: string
	'public.errorFetchingCampaign'?: string
	'public.errorFetchingEmail'?: string
	'public.errorFetchingLists'?: string
	'public.errorProcessingRequest'?: string
	'public.errorTitle'?: string
	'public.invalidFeature'?: string
	'public.invalidLink'?: string
	'public.managePrefs'?: string
	'public.managePrefsUnsub'?: string
	'public.noListsAvailable'?: string
	'public.noListsSelected'?: string
	'public.noSubInfo'?: string
	'public.noSubTitle'?: string
	'public.notFoundTitle'?: string
	'public.prefsSaved'?: string
	'public.privacyConfirmWipe'?: string
	'public.privacyExport'?: string
	'public.privacyExportHelp'?: string
	'public.privacyTitle'?: string
	'public.privacyWipe'?: string
	'public.privacyWipeHelp'?: string
	'public.sub'?: string
	'public.subConfirmed'?: string
	'public.subConfirmedTitle'?: string
	'public.subName'?: string
	'public.subNotFound'?: string
	'public.subOptinPending'?: string
	'public.subPrivateList'?: string
	'public.subTitle'?: string
	'public.unsub'?: string
	'public.unsubbedInfo'?: string
	'public.unsubbedTitle'?: string
	'public.unsubFull'?: string
	'public.unsubHelp'?: string
	'public.unsubscribeTitle'?: string
	'public.unsubTitle'?: string
	'settings.appearance.adminHelp'?: string
	'settings.appearance.adminName'?: string
	'settings.appearance.customCSS'?: string
	'settings.appearance.customJS'?: string
	'settings.appearance.name'?: string
	'settings.appearance.publicHelp'?: string
	'settings.appearance.publicName'?: string
	'settings.bounces.action'?: string
	'settings.bounces.blocklist'?: string
	'settings.bounces.count'?: string
	'settings.bounces.countHelp'?: string
	'settings.bounces.delete'?: string
	'settings.bounces.enable'?: string
	'settings.bounces.enabled'?: string
	'settings.bounces.enableMailbox'?: string
	'settings.bounces.enablePostmark'?: string
	'settings.bounces.enableSendgrid'?: string
	'settings.bounces.enableSES'?: string
	'settings.bounces.enableWebhooks'?: string
	'settings.bounces.folder'?: string
	'settings.bounces.folderHelp'?: string
	'settings.bounces.invalidScanInterval'?: string
	'settings.bounces.name'?: string
	'settings.bounces.postmarkPassword'?: string
	'settings.bounces.postmarkUsername'?: string
	'settings.bounces.postmarkUsernameHelp'?: string
	'settings.bounces.scanInterval'?: string
	'settings.bounces.scanIntervalHelp'?: string
	'settings.bounces.sendgridKey'?: string
	'settings.bounces.type'?: string
	'settings.bounces.username'?: string
	'settings.confirmRestart'?: string
	'settings.duplicateMessengerName'?: string
	'settings.errorEncoding'?: string
	'settings.errorNoSMTP'?: string
	'settings.general.adminNotifEmails'?: string
	'settings.general.adminNotifEmailsHelp'?: string
	'settings.general.checkUpdates'?: string
	'settings.general.checkUpdatesHelp'?: string
	'settings.general.enablePublicArchive'?: string
	'settings.general.enablePublicArchiveHelp'?: string
	'settings.general.enablePublicSubPage'?: string
	'settings.general.enablePublicSubPageHelp'?: string
	'settings.general.faviconURL'?: string
	'settings.general.faviconURLHelp'?: string
	'settings.general.fromEmail'?: string
	'settings.general.fromEmailHelp'?: string
	'settings.general.language'?: string
	'settings.general.logoURL'?: string
	'settings.general.logoURLHelp'?: string
	'settings.general.name'?: string
	'settings.general.rootURL'?: string
	'settings.general.rootURLHelp'?: string
	'settings.general.sendOptinConfirm'?: string
	'settings.general.sendOptinConfirmHelp'?: string
	'settings.general.siteName'?: string
	'settings.invalidMessengerName'?: string
	'settings.mailserver.authProtocol'?: string
	'settings.mailserver.host'?: string
	'settings.mailserver.hostHelp'?: string
	'settings.mailserver.idleTimeout'?: string
	'settings.mailserver.idleTimeoutHelp'?: string
	'settings.mailserver.maxConns'?: string
	'settings.mailserver.maxConnsHelp'?: string
	'settings.mailserver.password'?: string
	'settings.mailserver.passwordHelp'?: string
	'settings.mailserver.port'?: string
	'settings.mailserver.portHelp'?: string
	'settings.mailserver.skipTLS'?: string
	'settings.mailserver.skipTLSHelp'?: string
	'settings.mailserver.tls'?: string
	'settings.mailserver.tlsHelp'?: string
	'settings.mailserver.username'?: string
	'settings.mailserver.waitTimeout'?: string
	'settings.mailserver.waitTimeoutHelp'?: string
	'settings.media.provider'?: string
	'settings.media.s3.bucket'?: string
	'settings.media.s3.bucketPath'?: string
	'settings.media.s3.bucketPathHelp'?: string
	'settings.media.s3.bucketType'?: string
	'settings.media.s3.bucketTypePrivate'?: string
	'settings.media.s3.bucketTypePublic'?: string
	'settings.media.s3.key'?: string
	'settings.media.s3.publicURL'?: string
	'settings.media.s3.publicURLHelp'?: string
	'settings.media.s3.region'?: string
	'settings.media.s3.secret'?: string
	'settings.media.s3.uploadExpiry'?: string
	'settings.media.s3.uploadExpiryHelp'?: string
	'settings.media.s3.url'?: string
	'settings.media.s3.urlHelp'?: string
	'settings.media.title'?: string
	'settings.media.upload.path'?: string
	'settings.media.upload.pathHelp'?: string
	'settings.media.upload.uri'?: string
	'settings.media.upload.uriHelp'?: string
	'settings.messengers.maxConns'?: string
	'settings.messengers.maxConnsHelp'?: string
	'settings.messengers.messageSaved'?: string
	'settings.messengers.name'?: string
	'settings.messengers.nameHelp'?: string
	'settings.messengers.password'?: string
	'settings.messengers.retries'?: string
	'settings.messengers.retriesHelp'?: string
	'settings.messengers.skipTLSHelp'?: string
	'settings.messengers.timeout'?: string
	'settings.messengers.timeoutHelp'?: string
	'settings.messengers.url'?: string
	'settings.messengers.urlHelp'?: string
	'settings.messengers.username'?: string
	'settings.needsRestart'?: string
	'settings.performance.batchSize'?: string
	'settings.performance.batchSizeHelp'?: string
	'settings.performance.concurrency'?: string
	'settings.performance.concurrencyHelp'?: string
	'settings.performance.maxErrThreshold'?: string
	'settings.performance.maxErrThresholdHelp'?: string
	'settings.performance.messageRate'?: string
	'settings.performance.messageRateHelp'?: string
	'settings.performance.name'?: string
	'settings.performance.slidingWindow'?: string
	'settings.performance.slidingWindowDuration'?: string
	'settings.performance.slidingWindowDurationHelp'?: string
	'settings.performance.slidingWindowHelp'?: string
	'settings.performance.slidingWindowRate'?: string
	'settings.performance.slidingWindowRateHelp'?: string
	'settings.privacy.allowBlocklist'?: string
	'settings.privacy.allowBlocklistHelp'?: string
	'settings.privacy.allowExport'?: string
	'settings.privacy.allowExportHelp'?: string
	'settings.privacy.allowPrefs'?: string
	'settings.privacy.allowPrefsHelp'?: string
	'settings.privacy.allowWipe'?: string
	'settings.privacy.allowWipeHelp'?: string
	'settings.privacy.domainBlocklist'?: string
	'settings.privacy.domainBlocklistHelp'?: string
	'settings.privacy.individualSubTracking'?: string
	'settings.privacy.individualSubTrackingHelp'?: string
	'settings.privacy.listUnsubHeader'?: string
	'settings.privacy.listUnsubHeaderHelp'?: string
	'settings.privacy.name'?: string
	'settings.restart'?: string
	'settings.smtp.customHeaders'?: string
	'settings.smtp.customHeadersHelp'?: string
	'settings.smtp.enabled'?: string
	'settings.smtp.heloHost'?: string
	'settings.smtp.heloHostHelp'?: string
	'settings.smtp.name'?: string
	'settings.smtp.retries'?: string
	'settings.smtp.retriesHelp'?: string
	'settings.smtp.sendTest'?: string
	'settings.smtp.setCustomHeaders'?: string
	'settings.smtp.testConnection'?: string
	'settings.smtp.testEnterEmail'?: string
	'settings.smtp.toEmail'?: string
	'settings.title'?: string
	'settings.updateAvailable'?: string
	'subscribers.advancedQuery'?: string
	'subscribers.advancedQueryHelp'?: string
	'subscribers.attribs'?: string
	'subscribers.attribsHelp'?: string
	'subscribers.blocklistedHelp'?: string
	'subscribers.confirmBlocklist'?: string
	'subscribers.confirmDelete'?: string
	'subscribers.confirmExport'?: string
	'subscribers.domainBlocklisted'?: string
	'subscribers.downloadData'?: string
	'subscribers.email'?: string
	'subscribers.emailExists'?: string
	'subscribers.errorBlocklisting'?: string
	'subscribers.errorNoIDs'?: string
	'subscribers.errorNoListsGiven'?: string
	'subscribers.errorPreparingQuery'?: string
	'subscribers.errorSendingOptin'?: string
	'subscribers.export'?: string
	'subscribers.invalidAction'?: string
	'subscribers.invalidEmail'?: string
	'subscribers.invalidJSON'?: string
	'subscribers.invalidName'?: string
	'subscribers.listChangeApplied'?: string
	'subscribers.lists'?: string
	'subscribers.listsHelp'?: string
	'subscribers.listsPlaceholder'?: string
	'subscribers.manageLists'?: string
	'subscribers.markUnsubscribed'?: string
	'subscribers.newSubscriber'?: string
	'subscribers.numSelected'?: string
	'subscribers.optinSubject'?: string
	'subscribers.preconfirm'?: string
	'subscribers.preconfirmHelp'?: string
	'subscribers.query'?: string
	'subscribers.queryPlaceholder'?: string
	'subscribers.reset'?: string
	'subscribers.selectAll'?: string
	'subscribers.sendOptinConfirm'?: string
	'subscribers.sentOptinConfirm'?: string
	'subscribers.status.blocklisted'?: string
	'subscribers.status.confirmed'?: string
	'subscribers.status.enabled'?: string
	'subscribers.status.subscribed'?: string
	'subscribers.status.unconfirmed'?: string
	'subscribers.status.unsubscribed'?: string
	'subscribers.subscribersDeleted'?: string
	'templates.cantDeleteDefault'?: string
	'templates.default'?: string
	'templates.dummyName'?: string
	'templates.dummySubject'?: string
	'templates.errorCompiling'?: string
	'templates.errorRendering'?: string
	'templates.fieldInvalidName'?: string
	'templates.makeDefault'?: string
	'templates.newTemplate'?: string
	'templates.placeholderHelp'?: string
	'templates.preview'?: string
	'templates.rawHTML'?: string
	'templates.subject'?: string
	'users.login'?: string
	'users.logout'?: string
}

export interface LanguagePack {
	data?: LanguagePackData
}

/**
 * healthcheck endpoint
 */
export const getHealthCheck = (signal?: AbortSignal) => {
	return customInstance<GetHealthCheck200>({ url: `/health`, method: 'GET', signal })
}

export const getGetHealthCheckQueryKey = () => {
	return [`/health`] as const
}

export const getGetHealthCheckQueryOptions = <
	TData = Awaited<ReturnType<typeof getHealthCheck>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthCheck>>, TError, TData>>
}) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetHealthCheckQueryKey()

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealthCheck>>> = ({ signal }) =>
		getHealthCheck(signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getHealthCheck>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetHealthCheckQueryResult = NonNullable<Awaited<ReturnType<typeof getHealthCheck>>>
export type GetHealthCheckQueryError = unknown

export const useGetHealthCheck = <
	TData = Awaited<ReturnType<typeof getHealthCheck>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthCheck>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetHealthCheckQueryOptions(options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * returns all subscribers.
 */
export const getSubscribers = (params?: GetSubscribersParams, signal?: AbortSignal) => {
	return customInstance<GetSubscribers200>({ url: `/contacts`, method: 'GET', params, signal })
}

export const getGetSubscribersQueryKey = (params?: GetSubscribersParams) => {
	return [`/contacts`, ...(params ? [params] : [])] as const
}

export const getGetSubscribersQueryOptions = <
	TData = Awaited<ReturnType<typeof getSubscribers>>,
	TError = unknown
>(
	params?: GetSubscribersParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubscribers>>, TError, TData>>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetSubscribersQueryKey(params)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubscribers>>> = ({ signal }) =>
		getSubscribers(params, signal)

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getSubscribers>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetSubscribersQueryResult = NonNullable<Awaited<ReturnType<typeof getSubscribers>>>
export type GetSubscribersQueryError = unknown

export const useGetSubscribers = <
	TData = Awaited<ReturnType<typeof getSubscribers>>,
	TError = unknown
>(
	params?: GetSubscribersParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubscribers>>, TError, TData>>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetSubscribersQueryOptions(params, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * handles creation of new contact
 */
export const createContact = (newContact: NewContact) => {
	return customInstance<CreateContact200>({
		url: `/contacts`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: newContact
	})
}

export const getCreateContactMutationOptions = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createContact>>,
		TError,
		{ data: NewContact },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof createContact>>,
	TError,
	{ data: NewContact },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createContact>>,
		{ data: NewContact }
	> = props => {
		const { data } = props ?? {}

		return createContact(data)
	}

	return { mutationFn, ...mutationOptions }
}

export type CreateContactMutationResult = NonNullable<Awaited<ReturnType<typeof createContact>>>
export type CreateContactMutationBody = NewContact
export type CreateContactMutationError = unknown

export const useCreateContact = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createContact>>,
		TError,
		{ data: NewContact },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof createContact>>,
	TError,
	{ data: NewContact },
	TContext
> => {
	const mutationOptions = getCreateContactMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * handles subscribers deletion
 */
export const deleteSubscriberByList = (params: DeleteSubscriberByListParams) => {
	return customInstance<DeleteSubscriberByList200>({ url: `/contacts`, method: 'DELETE', params })
}

export const getDeleteSubscriberByListMutationOptions = <
	TError = unknown,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteSubscriberByList>>,
		TError,
		{ params: DeleteSubscriberByListParams },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteSubscriberByList>>,
	TError,
	{ params: DeleteSubscriberByListParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteSubscriberByList>>,
		{ params: DeleteSubscriberByListParams }
	> = props => {
		const { params } = props ?? {}

		return deleteSubscriberByList(params)
	}

	return { mutationFn, ...mutationOptions }
}

export type DeleteSubscriberByListMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteSubscriberByList>>
>

export type DeleteSubscriberByListMutationError = unknown

export const useDeleteSubscriberByList = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteSubscriberByList>>,
		TError,
		{ params: DeleteSubscriberByListParams },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteSubscriberByList>>,
	TError,
	{ params: DeleteSubscriberByListParams },
	TContext
> => {
	const mutationOptions = getDeleteSubscriberByListMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * handles the retrieval of a single contact by id.
 */
export const getContactById = (id: number, signal?: AbortSignal) => {
	return customInstance<GetContactById200>({ url: `/contacts/${id}`, method: 'GET', signal })
}

export const getGetContactByIdQueryKey = (id: number) => {
	return [`/contacts/${id}`] as const
}

export const getGetContactByIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getContactById>>,
	TError = unknown
>(
	id: number,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactById>>, TError, TData>>
	}
) => {
	const { query: queryOptions } = options ?? {}

	const queryKey = queryOptions?.queryKey ?? getGetContactByIdQueryKey(id)

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getContactById>>> = ({ signal }) =>
		getContactById(id, signal)

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getContactById>>,
		TError,
		TData
	> & { queryKey: QueryKey }
}

export type GetContactByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getContactById>>>
export type GetContactByIdQueryError = unknown

export const useGetContactById = <
	TData = Awaited<ReturnType<typeof getContactById>>,
	TError = unknown
>(
	id: number,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactById>>, TError, TData>>
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getGetContactByIdQueryOptions(id, options)

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

	query.queryKey = queryOptions.queryKey

	return query
}

/**
 * modify contact data
 */
export const updateContactById = (id: number, updateContact: UpdateContact) => {
	return customInstance<UpdateContactById200>({
		url: `/contacts/${id}`,
		method: 'PUT',
		headers: { 'Content-Type': 'application/json' },
		data: updateContact
	})
}

export const getUpdateContactByIdMutationOptions = <
	TError = unknown,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateContactById>>,
		TError,
		{ id: number; data: UpdateContact },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof updateContactById>>,
	TError,
	{ id: number; data: UpdateContact },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof updateContactById>>,
		{ id: number; data: UpdateContact }
	> = props => {
		const { id, data } = props ?? {}

		return updateContactById(id, data)
	}

	return { mutationFn, ...mutationOptions }
}

export type UpdateContactByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateContactById>>
>
export type UpdateContactByIdMutationBody = UpdateContact
export type UpdateContactByIdMutationError = unknown

export const useUpdateContactById = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof updateContactById>>,
		TError,
		{ id: number; data: UpdateContact },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof updateContactById>>,
	TError,
	{ id: number; data: UpdateContact },
	TContext
> => {
	const mutationOptions = getUpdateContactByIdMutationOptions(options)

	return useMutation(mutationOptions)
}

/**
 * handles subscriber deletion based on id
 */
export const deleteSubscriberById = (id: number) => {
	return customInstance<DeleteSubscriberById200>({ url: `/contacts/${id}`, method: 'DELETE' })
}

export const getDeleteSubscriberByIdMutationOptions = <
	TError = unknown,
	TContext = unknown
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteSubscriberById>>,
		TError,
		{ id: number },
		TContext
	>
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteSubscriberById>>,
	TError,
	{ id: number },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {}

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteSubscriberById>>,
		{ id: number }
	> = props => {
		const { id } = props ?? {}

		return deleteSubscriberById(id)
	}

	return { mutationFn, ...mutationOptions }
}

export type DeleteSubscriberByIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteSubscriberById>>
>

export type DeleteSubscriberByIdMutationError = unknown

export const useDeleteSubscriberById = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteSubscriberById>>,
		TError,
		{ id: number },
		TContext
	>
}): UseMutationResult<
	Awaited<ReturnType<typeof deleteSubscriberById>>,
	TError,
	{ id: number },
	TContext
> => {
	const mutationOptions = getDeleteSubscriberByIdMutationOptions(options)

	return useMutation(mutationOptions)
}

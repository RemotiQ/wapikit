//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var User = newUserTable("public", "User", "")

type userTable struct {
	postgres.Table

	// Columns
	UniqueId          postgres.ColumnString
	CreatedAt         postgres.ColumnTimestamp
	UpdatedAt         postgres.ColumnTimestamp
	Name              postgres.ColumnString
	Email             postgres.ColumnString
	PhoneNumber       postgres.ColumnString
	Username          postgres.ColumnString
	Password          postgres.ColumnString
	OauthProvider     postgres.ColumnString
	ProfilePictureUrl postgres.ColumnString
	Status            postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserTable struct {
	userTable

	EXCLUDED userTable
}

// AS creates new UserTable with assigned alias
func (a UserTable) AS(alias string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTable with assigned schema name
func (a UserTable) FromSchema(schemaName string) *UserTable {
	return newUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTable with assigned table prefix
func (a UserTable) WithPrefix(prefix string) *UserTable {
	return newUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTable with assigned table suffix
func (a UserTable) WithSuffix(suffix string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTable(schemaName, tableName, alias string) *UserTable {
	return &UserTable{
		userTable: newUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newUserTableImpl("", "excluded", ""),
	}
}

func newUserTableImpl(schemaName, tableName, alias string) userTable {
	var (
		UniqueIdColumn          = postgres.StringColumn("UniqueId")
		CreatedAtColumn         = postgres.TimestampColumn("CreatedAt")
		UpdatedAtColumn         = postgres.TimestampColumn("UpdatedAt")
		NameColumn              = postgres.StringColumn("Name")
		EmailColumn             = postgres.StringColumn("Email")
		PhoneNumberColumn       = postgres.StringColumn("PhoneNumber")
		UsernameColumn          = postgres.StringColumn("Username")
		PasswordColumn          = postgres.StringColumn("Password")
		OauthProviderColumn     = postgres.StringColumn("OauthProvider")
		ProfilePictureUrlColumn = postgres.StringColumn("ProfilePictureUrl")
		StatusColumn            = postgres.StringColumn("Status")
		allColumns              = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, NameColumn, EmailColumn, PhoneNumberColumn, UsernameColumn, PasswordColumn, OauthProviderColumn, ProfilePictureUrlColumn, StatusColumn}
		mutableColumns          = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, NameColumn, EmailColumn, PhoneNumberColumn, UsernameColumn, PasswordColumn, OauthProviderColumn, ProfilePictureUrlColumn, StatusColumn}
	)

	return userTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:          UniqueIdColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,
		Name:              NameColumn,
		Email:             EmailColumn,
		PhoneNumber:       PhoneNumberColumn,
		Username:          UsernameColumn,
		Password:          PasswordColumn,
		OauthProvider:     OauthProviderColumn,
		ProfilePictureUrl: ProfilePictureUrlColumn,
		Status:            StatusColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AiChat = newAiChatTable("public", "AiChat", "")

type aiChatTable struct {
	postgres.Table

	// Columns
	UniqueId             postgres.ColumnString
	CreatedAt            postgres.ColumnTimestampz
	UpdatedAt            postgres.ColumnTimestampz
	Status               postgres.ColumnString
	OrganizationId       postgres.ColumnString
	OrganizationMemberId postgres.ColumnString
	Title                postgres.ColumnString
	Visibility           postgres.ColumnString
	Description          postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AiChatTable struct {
	aiChatTable

	EXCLUDED aiChatTable
}

// AS creates new AiChatTable with assigned alias
func (a AiChatTable) AS(alias string) *AiChatTable {
	return newAiChatTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AiChatTable with assigned schema name
func (a AiChatTable) FromSchema(schemaName string) *AiChatTable {
	return newAiChatTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AiChatTable with assigned table prefix
func (a AiChatTable) WithPrefix(prefix string) *AiChatTable {
	return newAiChatTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AiChatTable with assigned table suffix
func (a AiChatTable) WithSuffix(suffix string) *AiChatTable {
	return newAiChatTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAiChatTable(schemaName, tableName, alias string) *AiChatTable {
	return &AiChatTable{
		aiChatTable: newAiChatTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newAiChatTableImpl("", "excluded", ""),
	}
}

func newAiChatTableImpl(schemaName, tableName, alias string) aiChatTable {
	var (
		UniqueIdColumn             = postgres.StringColumn("UniqueId")
		CreatedAtColumn            = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn            = postgres.TimestampzColumn("UpdatedAt")
		StatusColumn               = postgres.StringColumn("Status")
		OrganizationIdColumn       = postgres.StringColumn("OrganizationId")
		OrganizationMemberIdColumn = postgres.StringColumn("OrganizationMemberId")
		TitleColumn                = postgres.StringColumn("Title")
		VisibilityColumn           = postgres.StringColumn("Visibility")
		DescriptionColumn          = postgres.StringColumn("Description")
		allColumns                 = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, StatusColumn, OrganizationIdColumn, OrganizationMemberIdColumn, TitleColumn, VisibilityColumn, DescriptionColumn}
		mutableColumns             = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, StatusColumn, OrganizationIdColumn, OrganizationMemberIdColumn, TitleColumn, VisibilityColumn, DescriptionColumn}
	)

	return aiChatTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:             UniqueIdColumn,
		CreatedAt:            CreatedAtColumn,
		UpdatedAt:            UpdatedAtColumn,
		Status:               StatusColumn,
		OrganizationId:       OrganizationIdColumn,
		OrganizationMemberId: OrganizationMemberIdColumn,
		Title:                TitleColumn,
		Visibility:           VisibilityColumn,
		Description:          DescriptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

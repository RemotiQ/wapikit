//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MessageReply = newMessageReplyTable("public", "MessageReply", "")

type messageReplyTable struct {
	postgres.Table

	// Columns
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz
	MessageId      postgres.ColumnString
	ReplyMessageId postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MessageReplyTable struct {
	messageReplyTable

	EXCLUDED messageReplyTable
}

// AS creates new MessageReplyTable with assigned alias
func (a MessageReplyTable) AS(alias string) *MessageReplyTable {
	return newMessageReplyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MessageReplyTable with assigned schema name
func (a MessageReplyTable) FromSchema(schemaName string) *MessageReplyTable {
	return newMessageReplyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MessageReplyTable with assigned table prefix
func (a MessageReplyTable) WithPrefix(prefix string) *MessageReplyTable {
	return newMessageReplyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MessageReplyTable with assigned table suffix
func (a MessageReplyTable) WithSuffix(suffix string) *MessageReplyTable {
	return newMessageReplyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMessageReplyTable(schemaName, tableName, alias string) *MessageReplyTable {
	return &MessageReplyTable{
		messageReplyTable: newMessageReplyTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newMessageReplyTableImpl("", "excluded", ""),
	}
}

func newMessageReplyTableImpl(schemaName, tableName, alias string) messageReplyTable {
	var (
		CreatedAtColumn      = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn      = postgres.TimestampzColumn("UpdatedAt")
		MessageIdColumn      = postgres.StringColumn("MessageId")
		ReplyMessageIdColumn = postgres.StringColumn("ReplyMessageId")
		allColumns           = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, MessageIdColumn, ReplyMessageIdColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn}
	)

	return messageReplyTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		MessageId:      MessageIdColumn,
		ReplyMessageId: ReplyMessageIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

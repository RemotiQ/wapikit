//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Purchase = newPurchaseTable("public", "Purchase", "")

type purchaseTable struct {
	postgres.Table

	// Columns
	UniqueId                   postgres.ColumnString
	CreatedAt                  postgres.ColumnTimestamp
	UpdatedAt                  postgres.ColumnTimestamp
	PurchaseGateway            postgres.ColumnString
	PurchaseStatus             postgres.ColumnString
	Country                    postgres.ColumnString
	CurrencyCode               postgres.ColumnString
	GatewayInvoiceId           postgres.ColumnString
	GatewayPaymentId           postgres.ColumnString
	AmountInLowestCurrencyUnit postgres.ColumnFloat
	DiscountCouponId           postgres.ColumnString
	PricingPlanId              postgres.ColumnString
	UserId                     postgres.ColumnString
	OrganizationId             postgres.ColumnString
	SubscriptionId             postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PurchaseTable struct {
	purchaseTable

	EXCLUDED purchaseTable
}

// AS creates new PurchaseTable with assigned alias
func (a PurchaseTable) AS(alias string) *PurchaseTable {
	return newPurchaseTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PurchaseTable with assigned schema name
func (a PurchaseTable) FromSchema(schemaName string) *PurchaseTable {
	return newPurchaseTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PurchaseTable with assigned table prefix
func (a PurchaseTable) WithPrefix(prefix string) *PurchaseTable {
	return newPurchaseTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PurchaseTable with assigned table suffix
func (a PurchaseTable) WithSuffix(suffix string) *PurchaseTable {
	return newPurchaseTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPurchaseTable(schemaName, tableName, alias string) *PurchaseTable {
	return &PurchaseTable{
		purchaseTable: newPurchaseTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newPurchaseTableImpl("", "excluded", ""),
	}
}

func newPurchaseTableImpl(schemaName, tableName, alias string) purchaseTable {
	var (
		UniqueIdColumn                   = postgres.StringColumn("UniqueId")
		CreatedAtColumn                  = postgres.TimestampColumn("CreatedAt")
		UpdatedAtColumn                  = postgres.TimestampColumn("UpdatedAt")
		PurchaseGatewayColumn            = postgres.StringColumn("PurchaseGateway")
		PurchaseStatusColumn             = postgres.StringColumn("PurchaseStatus")
		CountryColumn                    = postgres.StringColumn("Country")
		CurrencyCodeColumn               = postgres.StringColumn("CurrencyCode")
		GatewayInvoiceIdColumn           = postgres.StringColumn("GatewayInvoiceId")
		GatewayPaymentIdColumn           = postgres.StringColumn("GatewayPaymentId")
		AmountInLowestCurrencyUnitColumn = postgres.FloatColumn("AmountInLowestCurrencyUnit")
		DiscountCouponIdColumn           = postgres.StringColumn("DiscountCouponId")
		PricingPlanIdColumn              = postgres.StringColumn("PricingPlanId")
		UserIdColumn                     = postgres.StringColumn("UserId")
		OrganizationIdColumn             = postgres.StringColumn("OrganizationId")
		SubscriptionIdColumn             = postgres.StringColumn("SubscriptionId")
		allColumns                       = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, PurchaseGatewayColumn, PurchaseStatusColumn, CountryColumn, CurrencyCodeColumn, GatewayInvoiceIdColumn, GatewayPaymentIdColumn, AmountInLowestCurrencyUnitColumn, DiscountCouponIdColumn, PricingPlanIdColumn, UserIdColumn, OrganizationIdColumn, SubscriptionIdColumn}
		mutableColumns                   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, PurchaseGatewayColumn, PurchaseStatusColumn, CountryColumn, CurrencyCodeColumn, GatewayInvoiceIdColumn, GatewayPaymentIdColumn, AmountInLowestCurrencyUnitColumn, DiscountCouponIdColumn, PricingPlanIdColumn, UserIdColumn, OrganizationIdColumn, SubscriptionIdColumn}
	)

	return purchaseTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:                   UniqueIdColumn,
		CreatedAt:                  CreatedAtColumn,
		UpdatedAt:                  UpdatedAtColumn,
		PurchaseGateway:            PurchaseGatewayColumn,
		PurchaseStatus:             PurchaseStatusColumn,
		Country:                    CountryColumn,
		CurrencyCode:               CurrencyCodeColumn,
		GatewayInvoiceId:           GatewayInvoiceIdColumn,
		GatewayPaymentId:           GatewayPaymentIdColumn,
		AmountInLowestCurrencyUnit: AmountInLowestCurrencyUnitColumn,
		DiscountCouponId:           DiscountCouponIdColumn,
		PricingPlanId:              PricingPlanIdColumn,
		UserId:                     UserIdColumn,
		OrganizationId:             OrganizationIdColumn,
		SubscriptionId:             SubscriptionIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

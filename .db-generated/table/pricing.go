//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Pricing = newPricingTable("public", "Pricing", "")

type pricingTable struct {
	postgres.Table

	// Columns
	UniqueId                  postgres.ColumnString
	CreatedAt                 postgres.ColumnTimestampz
	UpdatedAt                 postgres.ColumnTimestampz
	CurrencyCode              postgres.ColumnString
	CurrencySymbol            postgres.ColumnString
	Country                   postgres.ColumnString
	PriceInLowestCurrencyUnit postgres.ColumnFloat
	PricingPlanId             postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PricingTable struct {
	pricingTable

	EXCLUDED pricingTable
}

// AS creates new PricingTable with assigned alias
func (a PricingTable) AS(alias string) *PricingTable {
	return newPricingTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PricingTable with assigned schema name
func (a PricingTable) FromSchema(schemaName string) *PricingTable {
	return newPricingTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PricingTable with assigned table prefix
func (a PricingTable) WithPrefix(prefix string) *PricingTable {
	return newPricingTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PricingTable with assigned table suffix
func (a PricingTable) WithSuffix(suffix string) *PricingTable {
	return newPricingTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPricingTable(schemaName, tableName, alias string) *PricingTable {
	return &PricingTable{
		pricingTable: newPricingTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newPricingTableImpl("", "excluded", ""),
	}
}

func newPricingTableImpl(schemaName, tableName, alias string) pricingTable {
	var (
		UniqueIdColumn                  = postgres.StringColumn("UniqueId")
		CreatedAtColumn                 = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn                 = postgres.TimestampzColumn("UpdatedAt")
		CurrencyCodeColumn              = postgres.StringColumn("CurrencyCode")
		CurrencySymbolColumn            = postgres.StringColumn("CurrencySymbol")
		CountryColumn                   = postgres.StringColumn("Country")
		PriceInLowestCurrencyUnitColumn = postgres.FloatColumn("PriceInLowestCurrencyUnit")
		PricingPlanIdColumn             = postgres.StringColumn("PricingPlanId")
		allColumns                      = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, CurrencyCodeColumn, CurrencySymbolColumn, CountryColumn, PriceInLowestCurrencyUnitColumn, PricingPlanIdColumn}
		mutableColumns                  = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, CurrencyCodeColumn, CurrencySymbolColumn, CountryColumn, PriceInLowestCurrencyUnitColumn, PricingPlanIdColumn}
	)

	return pricingTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:                  UniqueIdColumn,
		CreatedAt:                 CreatedAtColumn,
		UpdatedAt:                 UpdatedAtColumn,
		CurrencyCode:              CurrencyCodeColumn,
		CurrencySymbol:            CurrencySymbolColumn,
		Country:                   CountryColumn,
		PriceInLowestCurrencyUnit: PriceInLowestCurrencyUnitColumn,
		PricingPlanId:             PricingPlanIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

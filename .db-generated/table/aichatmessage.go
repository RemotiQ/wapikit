//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AiChatMessage = newAiChatMessageTable("public", "AiChatMessage", "")

type aiChatMessageTable struct {
	postgres.Table

	// Columns
	UniqueId             postgres.ColumnString
	CreatedAt            postgres.ColumnTimestampz
	UpdatedAt            postgres.ColumnTimestampz
	Content              postgres.ColumnString
	AiChatId             postgres.ColumnString
	OrganizationId       postgres.ColumnString
	OrganizationMemberId postgres.ColumnString
	Role                 postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AiChatMessageTable struct {
	aiChatMessageTable

	EXCLUDED aiChatMessageTable
}

// AS creates new AiChatMessageTable with assigned alias
func (a AiChatMessageTable) AS(alias string) *AiChatMessageTable {
	return newAiChatMessageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AiChatMessageTable with assigned schema name
func (a AiChatMessageTable) FromSchema(schemaName string) *AiChatMessageTable {
	return newAiChatMessageTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AiChatMessageTable with assigned table prefix
func (a AiChatMessageTable) WithPrefix(prefix string) *AiChatMessageTable {
	return newAiChatMessageTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AiChatMessageTable with assigned table suffix
func (a AiChatMessageTable) WithSuffix(suffix string) *AiChatMessageTable {
	return newAiChatMessageTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAiChatMessageTable(schemaName, tableName, alias string) *AiChatMessageTable {
	return &AiChatMessageTable{
		aiChatMessageTable: newAiChatMessageTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newAiChatMessageTableImpl("", "excluded", ""),
	}
}

func newAiChatMessageTableImpl(schemaName, tableName, alias string) aiChatMessageTable {
	var (
		UniqueIdColumn             = postgres.StringColumn("UniqueId")
		CreatedAtColumn            = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn            = postgres.TimestampzColumn("UpdatedAt")
		ContentColumn              = postgres.StringColumn("Content")
		AiChatIdColumn             = postgres.StringColumn("AiChatId")
		OrganizationIdColumn       = postgres.StringColumn("OrganizationId")
		OrganizationMemberIdColumn = postgres.StringColumn("OrganizationMemberId")
		RoleColumn                 = postgres.StringColumn("Role")
		allColumns                 = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, ContentColumn, AiChatIdColumn, OrganizationIdColumn, OrganizationMemberIdColumn, RoleColumn}
		mutableColumns             = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, ContentColumn, AiChatIdColumn, OrganizationIdColumn, OrganizationMemberIdColumn, RoleColumn}
	)

	return aiChatMessageTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:             UniqueIdColumn,
		CreatedAt:            CreatedAtColumn,
		UpdatedAt:            UpdatedAtColumn,
		Content:              ContentColumn,
		AiChatId:             AiChatIdColumn,
		OrganizationId:       OrganizationIdColumn,
		OrganizationMemberId: OrganizationMemberIdColumn,
		Role:                 RoleColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OrganisationIntegration = newOrganisationIntegrationTable("public", "OrganisationIntegration", "")

type organisationIntegrationTable struct {
	postgres.Table

	// Columns
	UniqueId  postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp
	UpdatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrganisationIntegrationTable struct {
	organisationIntegrationTable

	EXCLUDED organisationIntegrationTable
}

// AS creates new OrganisationIntegrationTable with assigned alias
func (a OrganisationIntegrationTable) AS(alias string) *OrganisationIntegrationTable {
	return newOrganisationIntegrationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrganisationIntegrationTable with assigned schema name
func (a OrganisationIntegrationTable) FromSchema(schemaName string) *OrganisationIntegrationTable {
	return newOrganisationIntegrationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrganisationIntegrationTable with assigned table prefix
func (a OrganisationIntegrationTable) WithPrefix(prefix string) *OrganisationIntegrationTable {
	return newOrganisationIntegrationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrganisationIntegrationTable with assigned table suffix
func (a OrganisationIntegrationTable) WithSuffix(suffix string) *OrganisationIntegrationTable {
	return newOrganisationIntegrationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrganisationIntegrationTable(schemaName, tableName, alias string) *OrganisationIntegrationTable {
	return &OrganisationIntegrationTable{
		organisationIntegrationTable: newOrganisationIntegrationTableImpl(schemaName, tableName, alias),
		EXCLUDED:                     newOrganisationIntegrationTableImpl("", "excluded", ""),
	}
}

func newOrganisationIntegrationTableImpl(schemaName, tableName, alias string) organisationIntegrationTable {
	var (
		UniqueIdColumn  = postgres.StringColumn("UniqueId")
		CreatedAtColumn = postgres.TimestampColumn("CreatedAt")
		UpdatedAtColumn = postgres.TimestampColumn("UpdatedAt")
		allColumns      = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn}
	)

	return organisationIntegrationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:  UniqueIdColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OrganizationRole = newOrganizationRoleTable("public", "OrganizationRole", "")

type organizationRoleTable struct {
	postgres.Table

	// Columns
	UniqueId       postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz
	Name           postgres.ColumnString
	Description    postgres.ColumnString
	Permissions    postgres.ColumnString
	OrganizationId postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrganizationRoleTable struct {
	organizationRoleTable

	EXCLUDED organizationRoleTable
}

// AS creates new OrganizationRoleTable with assigned alias
func (a OrganizationRoleTable) AS(alias string) *OrganizationRoleTable {
	return newOrganizationRoleTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrganizationRoleTable with assigned schema name
func (a OrganizationRoleTable) FromSchema(schemaName string) *OrganizationRoleTable {
	return newOrganizationRoleTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrganizationRoleTable with assigned table prefix
func (a OrganizationRoleTable) WithPrefix(prefix string) *OrganizationRoleTable {
	return newOrganizationRoleTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrganizationRoleTable with assigned table suffix
func (a OrganizationRoleTable) WithSuffix(suffix string) *OrganizationRoleTable {
	return newOrganizationRoleTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrganizationRoleTable(schemaName, tableName, alias string) *OrganizationRoleTable {
	return &OrganizationRoleTable{
		organizationRoleTable: newOrganizationRoleTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newOrganizationRoleTableImpl("", "excluded", ""),
	}
}

func newOrganizationRoleTableImpl(schemaName, tableName, alias string) organizationRoleTable {
	var (
		UniqueIdColumn       = postgres.StringColumn("UniqueId")
		CreatedAtColumn      = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn      = postgres.TimestampzColumn("UpdatedAt")
		NameColumn           = postgres.StringColumn("Name")
		DescriptionColumn    = postgres.StringColumn("Description")
		PermissionsColumn    = postgres.StringColumn("Permissions")
		OrganizationIdColumn = postgres.StringColumn("OrganizationId")
		allColumns           = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, NameColumn, DescriptionColumn, PermissionsColumn, OrganizationIdColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, NameColumn, DescriptionColumn, PermissionsColumn, OrganizationIdColumn}
	)

	return organizationRoleTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:       UniqueIdColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		Name:           NameColumn,
		Description:    DescriptionColumn,
		Permissions:    PermissionsColumn,
		OrganizationId: OrganizationIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var RoleAssignment = newRoleAssignmentTable("public", "RoleAssignment", "")

type roleAssignmentTable struct {
	postgres.Table

	// Columns
	UniqueId             postgres.ColumnString
	CreatedAt            postgres.ColumnTimestamp
	UpdatedAt            postgres.ColumnTimestamp
	OrganizationRoleId   postgres.ColumnString
	OrganizationMemberId postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RoleAssignmentTable struct {
	roleAssignmentTable

	EXCLUDED roleAssignmentTable
}

// AS creates new RoleAssignmentTable with assigned alias
func (a RoleAssignmentTable) AS(alias string) *RoleAssignmentTable {
	return newRoleAssignmentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RoleAssignmentTable with assigned schema name
func (a RoleAssignmentTable) FromSchema(schemaName string) *RoleAssignmentTable {
	return newRoleAssignmentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RoleAssignmentTable with assigned table prefix
func (a RoleAssignmentTable) WithPrefix(prefix string) *RoleAssignmentTable {
	return newRoleAssignmentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RoleAssignmentTable with assigned table suffix
func (a RoleAssignmentTable) WithSuffix(suffix string) *RoleAssignmentTable {
	return newRoleAssignmentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRoleAssignmentTable(schemaName, tableName, alias string) *RoleAssignmentTable {
	return &RoleAssignmentTable{
		roleAssignmentTable: newRoleAssignmentTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newRoleAssignmentTableImpl("", "excluded", ""),
	}
}

func newRoleAssignmentTableImpl(schemaName, tableName, alias string) roleAssignmentTable {
	var (
		UniqueIdColumn             = postgres.StringColumn("UniqueId")
		CreatedAtColumn            = postgres.TimestampColumn("CreatedAt")
		UpdatedAtColumn            = postgres.TimestampColumn("UpdatedAt")
		OrganizationRoleIdColumn   = postgres.StringColumn("OrganizationRoleId")
		OrganizationMemberIdColumn = postgres.StringColumn("OrganizationMemberId")
		allColumns                 = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, OrganizationRoleIdColumn, OrganizationMemberIdColumn}
		mutableColumns             = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, OrganizationRoleIdColumn, OrganizationMemberIdColumn}
	)

	return roleAssignmentTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:             UniqueIdColumn,
		CreatedAt:            CreatedAtColumn,
		UpdatedAt:            UpdatedAtColumn,
		OrganizationRoleId:   OrganizationRoleIdColumn,
		OrganizationMemberId: OrganizationMemberIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

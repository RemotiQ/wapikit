//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ConversationTag = newConversationTagTable("public", "ConversationTag", "")

type conversationTagTable struct {
	postgres.Table

	// Columns
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz
	ConversationId postgres.ColumnString
	TagId          postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ConversationTagTable struct {
	conversationTagTable

	EXCLUDED conversationTagTable
}

// AS creates new ConversationTagTable with assigned alias
func (a ConversationTagTable) AS(alias string) *ConversationTagTable {
	return newConversationTagTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConversationTagTable with assigned schema name
func (a ConversationTagTable) FromSchema(schemaName string) *ConversationTagTable {
	return newConversationTagTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConversationTagTable with assigned table prefix
func (a ConversationTagTable) WithPrefix(prefix string) *ConversationTagTable {
	return newConversationTagTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConversationTagTable with assigned table suffix
func (a ConversationTagTable) WithSuffix(suffix string) *ConversationTagTable {
	return newConversationTagTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConversationTagTable(schemaName, tableName, alias string) *ConversationTagTable {
	return &ConversationTagTable{
		conversationTagTable: newConversationTagTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newConversationTagTableImpl("", "excluded", ""),
	}
}

func newConversationTagTableImpl(schemaName, tableName, alias string) conversationTagTable {
	var (
		CreatedAtColumn      = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn      = postgres.TimestampzColumn("UpdatedAt")
		ConversationIdColumn = postgres.StringColumn("ConversationId")
		TagIdColumn          = postgres.StringColumn("TagId")
		allColumns           = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, ConversationIdColumn, TagIdColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn}
	)

	return conversationTagTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		ConversationId: ConversationIdColumn,
		TagId:          TagIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

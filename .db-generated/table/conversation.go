//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Conversation = newConversationTable("public", "Conversation", "")

type conversationTable struct {
	postgres.Table

	// Columns
	UniqueId                             postgres.ColumnString
	CreatedAt                            postgres.ColumnTimestampz
	UpdatedAt                            postgres.ColumnTimestampz
	ContactId                            postgres.ColumnString
	OrganizationId                       postgres.ColumnString
	Status                               postgres.ColumnString
	WhatsappBusinessAccountPhoneNumberId postgres.ColumnString
	InitiatedBy                          postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ConversationTable struct {
	conversationTable

	EXCLUDED conversationTable
}

// AS creates new ConversationTable with assigned alias
func (a ConversationTable) AS(alias string) *ConversationTable {
	return newConversationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConversationTable with assigned schema name
func (a ConversationTable) FromSchema(schemaName string) *ConversationTable {
	return newConversationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConversationTable with assigned table prefix
func (a ConversationTable) WithPrefix(prefix string) *ConversationTable {
	return newConversationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConversationTable with assigned table suffix
func (a ConversationTable) WithSuffix(suffix string) *ConversationTable {
	return newConversationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConversationTable(schemaName, tableName, alias string) *ConversationTable {
	return &ConversationTable{
		conversationTable: newConversationTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newConversationTableImpl("", "excluded", ""),
	}
}

func newConversationTableImpl(schemaName, tableName, alias string) conversationTable {
	var (
		UniqueIdColumn                             = postgres.StringColumn("UniqueId")
		CreatedAtColumn                            = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn                            = postgres.TimestampzColumn("UpdatedAt")
		ContactIdColumn                            = postgres.StringColumn("ContactId")
		OrganizationIdColumn                       = postgres.StringColumn("OrganizationId")
		StatusColumn                               = postgres.StringColumn("Status")
		WhatsappBusinessAccountPhoneNumberIdColumn = postgres.StringColumn("WhatsappBusinessAccountPhoneNumberId")
		InitiatedByColumn                          = postgres.StringColumn("InitiatedBy")
		allColumns                                 = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, ContactIdColumn, OrganizationIdColumn, StatusColumn, WhatsappBusinessAccountPhoneNumberIdColumn, InitiatedByColumn}
		mutableColumns                             = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, ContactIdColumn, OrganizationIdColumn, StatusColumn, WhatsappBusinessAccountPhoneNumberIdColumn, InitiatedByColumn}
	)

	return conversationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:                             UniqueIdColumn,
		CreatedAt:                            CreatedAtColumn,
		UpdatedAt:                            UpdatedAtColumn,
		ContactId:                            ContactIdColumn,
		OrganizationId:                       OrganizationIdColumn,
		Status:                               StatusColumn,
		WhatsappBusinessAccountPhoneNumberId: WhatsappBusinessAccountPhoneNumberIdColumn,
		InitiatedBy:                          InitiatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

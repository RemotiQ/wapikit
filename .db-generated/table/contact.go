//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Contact = newContactTable("public", "Contact", "")

type contactTable struct {
	postgres.Table

	// Columns
	UniqueId       postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz
	OrganizationId postgres.ColumnString
	Status         postgres.ColumnString
	Name           postgres.ColumnString
	PhoneNumber    postgres.ColumnString
	Attributes     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ContactTable struct {
	contactTable

	EXCLUDED contactTable
}

// AS creates new ContactTable with assigned alias
func (a ContactTable) AS(alias string) *ContactTable {
	return newContactTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ContactTable with assigned schema name
func (a ContactTable) FromSchema(schemaName string) *ContactTable {
	return newContactTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ContactTable with assigned table prefix
func (a ContactTable) WithPrefix(prefix string) *ContactTable {
	return newContactTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ContactTable with assigned table suffix
func (a ContactTable) WithSuffix(suffix string) *ContactTable {
	return newContactTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newContactTable(schemaName, tableName, alias string) *ContactTable {
	return &ContactTable{
		contactTable: newContactTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newContactTableImpl("", "excluded", ""),
	}
}

func newContactTableImpl(schemaName, tableName, alias string) contactTable {
	var (
		UniqueIdColumn       = postgres.StringColumn("UniqueId")
		CreatedAtColumn      = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn      = postgres.TimestampzColumn("UpdatedAt")
		OrganizationIdColumn = postgres.StringColumn("OrganizationId")
		StatusColumn         = postgres.StringColumn("Status")
		NameColumn           = postgres.StringColumn("Name")
		PhoneNumberColumn    = postgres.StringColumn("PhoneNumber")
		AttributesColumn     = postgres.StringColumn("Attributes")
		allColumns           = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, OrganizationIdColumn, StatusColumn, NameColumn, PhoneNumberColumn, AttributesColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, OrganizationIdColumn, StatusColumn, NameColumn, PhoneNumberColumn, AttributesColumn}
	)

	return contactTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:       UniqueIdColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		OrganizationId: OrganizationIdColumn,
		Status:         StatusColumn,
		Name:           NameColumn,
		PhoneNumber:    PhoneNumberColumn,
		Attributes:     AttributesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

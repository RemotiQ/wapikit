//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AiChatSuggestions = newAiChatSuggestionsTable("public", "AiChatSuggestions", "")

type aiChatSuggestionsTable struct {
	postgres.Table

	// Columns
	UniqueId  postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	AiChatId  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AiChatSuggestionsTable struct {
	aiChatSuggestionsTable

	EXCLUDED aiChatSuggestionsTable
}

// AS creates new AiChatSuggestionsTable with assigned alias
func (a AiChatSuggestionsTable) AS(alias string) *AiChatSuggestionsTable {
	return newAiChatSuggestionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AiChatSuggestionsTable with assigned schema name
func (a AiChatSuggestionsTable) FromSchema(schemaName string) *AiChatSuggestionsTable {
	return newAiChatSuggestionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AiChatSuggestionsTable with assigned table prefix
func (a AiChatSuggestionsTable) WithPrefix(prefix string) *AiChatSuggestionsTable {
	return newAiChatSuggestionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AiChatSuggestionsTable with assigned table suffix
func (a AiChatSuggestionsTable) WithSuffix(suffix string) *AiChatSuggestionsTable {
	return newAiChatSuggestionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAiChatSuggestionsTable(schemaName, tableName, alias string) *AiChatSuggestionsTable {
	return &AiChatSuggestionsTable{
		aiChatSuggestionsTable: newAiChatSuggestionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newAiChatSuggestionsTableImpl("", "excluded", ""),
	}
}

func newAiChatSuggestionsTableImpl(schemaName, tableName, alias string) aiChatSuggestionsTable {
	var (
		UniqueIdColumn  = postgres.StringColumn("UniqueId")
		CreatedAtColumn = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn = postgres.TimestampzColumn("UpdatedAt")
		AiChatIdColumn  = postgres.StringColumn("AiChatId")
		allColumns      = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, AiChatIdColumn}
		mutableColumns  = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, AiChatIdColumn}
	)

	return aiChatSuggestionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:  UniqueIdColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		AiChatId:  AiChatIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

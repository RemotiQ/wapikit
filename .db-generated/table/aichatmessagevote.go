//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AiChatMessageVote = newAiChatMessageVoteTable("public", "AiChatMessageVote", "")

type aiChatMessageVoteTable struct {
	postgres.Table

	// Columns
	UniqueId        postgres.ColumnString
	CreatedAt       postgres.ColumnTimestampz
	UpdatedAt       postgres.ColumnTimestampz
	AiChatMessageId postgres.ColumnString
	Vote            postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AiChatMessageVoteTable struct {
	aiChatMessageVoteTable

	EXCLUDED aiChatMessageVoteTable
}

// AS creates new AiChatMessageVoteTable with assigned alias
func (a AiChatMessageVoteTable) AS(alias string) *AiChatMessageVoteTable {
	return newAiChatMessageVoteTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AiChatMessageVoteTable with assigned schema name
func (a AiChatMessageVoteTable) FromSchema(schemaName string) *AiChatMessageVoteTable {
	return newAiChatMessageVoteTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AiChatMessageVoteTable with assigned table prefix
func (a AiChatMessageVoteTable) WithPrefix(prefix string) *AiChatMessageVoteTable {
	return newAiChatMessageVoteTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AiChatMessageVoteTable with assigned table suffix
func (a AiChatMessageVoteTable) WithSuffix(suffix string) *AiChatMessageVoteTable {
	return newAiChatMessageVoteTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAiChatMessageVoteTable(schemaName, tableName, alias string) *AiChatMessageVoteTable {
	return &AiChatMessageVoteTable{
		aiChatMessageVoteTable: newAiChatMessageVoteTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newAiChatMessageVoteTableImpl("", "excluded", ""),
	}
}

func newAiChatMessageVoteTableImpl(schemaName, tableName, alias string) aiChatMessageVoteTable {
	var (
		UniqueIdColumn        = postgres.StringColumn("UniqueId")
		CreatedAtColumn       = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn       = postgres.TimestampzColumn("UpdatedAt")
		AiChatMessageIdColumn = postgres.StringColumn("AiChatMessageId")
		VoteColumn            = postgres.StringColumn("Vote")
		allColumns            = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, AiChatMessageIdColumn, VoteColumn}
		mutableColumns        = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, AiChatMessageIdColumn, VoteColumn}
	)

	return aiChatMessageVoteTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:        UniqueIdColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,
		AiChatMessageId: AiChatMessageIdColumn,
		Vote:            VoteColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

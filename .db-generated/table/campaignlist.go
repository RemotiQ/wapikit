//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CampaignList = newCampaignListTable("public", "CampaignList", "")

type campaignListTable struct {
	postgres.Table

	// Columns
	CreatedAt     postgres.ColumnTimestampz
	UpdatedAt     postgres.ColumnTimestampz
	ContactListId postgres.ColumnString
	CampaignId    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CampaignListTable struct {
	campaignListTable

	EXCLUDED campaignListTable
}

// AS creates new CampaignListTable with assigned alias
func (a CampaignListTable) AS(alias string) *CampaignListTable {
	return newCampaignListTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CampaignListTable with assigned schema name
func (a CampaignListTable) FromSchema(schemaName string) *CampaignListTable {
	return newCampaignListTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CampaignListTable with assigned table prefix
func (a CampaignListTable) WithPrefix(prefix string) *CampaignListTable {
	return newCampaignListTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CampaignListTable with assigned table suffix
func (a CampaignListTable) WithSuffix(suffix string) *CampaignListTable {
	return newCampaignListTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCampaignListTable(schemaName, tableName, alias string) *CampaignListTable {
	return &CampaignListTable{
		campaignListTable: newCampaignListTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newCampaignListTableImpl("", "excluded", ""),
	}
}

func newCampaignListTableImpl(schemaName, tableName, alias string) campaignListTable {
	var (
		CreatedAtColumn     = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn     = postgres.TimestampzColumn("UpdatedAt")
		ContactListIdColumn = postgres.StringColumn("ContactListId")
		CampaignIdColumn    = postgres.StringColumn("CampaignId")
		allColumns          = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, ContactListIdColumn, CampaignIdColumn}
		mutableColumns      = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn}
	)

	return campaignListTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,
		ContactListId: ContactListIdColumn,
		CampaignId:    CampaignIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

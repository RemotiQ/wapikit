//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PricingPlan = newPricingPlanTable("public", "PricingPlan", "")

type pricingPlanTable struct {
	postgres.Table

	// Columns
	UniqueId        postgres.ColumnString
	Title           postgres.ColumnString
	Description     postgres.ColumnString
	CreatedAt       postgres.ColumnTimestampz
	UpdatedAt       postgres.ColumnTimestampz
	PricingPlanTier postgres.ColumnString
	IsPopular       postgres.ColumnBool
	PricingPlanType postgres.ColumnString
	Validity        postgres.ColumnString
	GatewayPlanId   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PricingPlanTable struct {
	pricingPlanTable

	EXCLUDED pricingPlanTable
}

// AS creates new PricingPlanTable with assigned alias
func (a PricingPlanTable) AS(alias string) *PricingPlanTable {
	return newPricingPlanTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PricingPlanTable with assigned schema name
func (a PricingPlanTable) FromSchema(schemaName string) *PricingPlanTable {
	return newPricingPlanTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PricingPlanTable with assigned table prefix
func (a PricingPlanTable) WithPrefix(prefix string) *PricingPlanTable {
	return newPricingPlanTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PricingPlanTable with assigned table suffix
func (a PricingPlanTable) WithSuffix(suffix string) *PricingPlanTable {
	return newPricingPlanTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPricingPlanTable(schemaName, tableName, alias string) *PricingPlanTable {
	return &PricingPlanTable{
		pricingPlanTable: newPricingPlanTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newPricingPlanTableImpl("", "excluded", ""),
	}
}

func newPricingPlanTableImpl(schemaName, tableName, alias string) pricingPlanTable {
	var (
		UniqueIdColumn        = postgres.StringColumn("UniqueId")
		TitleColumn           = postgres.StringColumn("Title")
		DescriptionColumn     = postgres.StringColumn("Description")
		CreatedAtColumn       = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn       = postgres.TimestampzColumn("UpdatedAt")
		PricingPlanTierColumn = postgres.StringColumn("PricingPlanTier")
		IsPopularColumn       = postgres.BoolColumn("IsPopular")
		PricingPlanTypeColumn = postgres.StringColumn("PricingPlanType")
		ValidityColumn        = postgres.StringColumn("Validity")
		GatewayPlanIdColumn   = postgres.StringColumn("GatewayPlanId")
		allColumns            = postgres.ColumnList{UniqueIdColumn, TitleColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn, PricingPlanTierColumn, IsPopularColumn, PricingPlanTypeColumn, ValidityColumn, GatewayPlanIdColumn}
		mutableColumns        = postgres.ColumnList{TitleColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn, PricingPlanTierColumn, IsPopularColumn, PricingPlanTypeColumn, ValidityColumn, GatewayPlanIdColumn}
	)

	return pricingPlanTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:        UniqueIdColumn,
		Title:           TitleColumn,
		Description:     DescriptionColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,
		PricingPlanTier: PricingPlanTierColumn,
		IsPopular:       IsPopularColumn,
		PricingPlanType: PricingPlanTypeColumn,
		Validity:        ValidityColumn,
		GatewayPlanId:   GatewayPlanIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

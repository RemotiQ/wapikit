//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OrganizationSubscription = newOrganizationSubscriptionTable("public", "OrganizationSubscription", "")

type organizationSubscriptionTable struct {
	postgres.Table

	// Columns
	UniqueId                        postgres.ColumnString
	CreatedAt                       postgres.ColumnTimestamp
	UpdatedAt                       postgres.ColumnTimestamp
	OrganizationId                  postgres.ColumnString
	SubscriptionStatus              postgres.ColumnString
	SubscriptionTier                postgres.ColumnString
	GatewaySubscriptionId           postgres.ColumnString
	ValidTill                       postgres.ColumnTimestamp
	LastRenewedAt                   postgres.ColumnTimestamp
	CancelledAt                     postgres.ColumnTimestamp
	WillBeCancelledAtTheEndOfPeriod postgres.ColumnBool
	NumberOfRenewals                postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrganizationSubscriptionTable struct {
	organizationSubscriptionTable

	EXCLUDED organizationSubscriptionTable
}

// AS creates new OrganizationSubscriptionTable with assigned alias
func (a OrganizationSubscriptionTable) AS(alias string) *OrganizationSubscriptionTable {
	return newOrganizationSubscriptionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrganizationSubscriptionTable with assigned schema name
func (a OrganizationSubscriptionTable) FromSchema(schemaName string) *OrganizationSubscriptionTable {
	return newOrganizationSubscriptionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrganizationSubscriptionTable with assigned table prefix
func (a OrganizationSubscriptionTable) WithPrefix(prefix string) *OrganizationSubscriptionTable {
	return newOrganizationSubscriptionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrganizationSubscriptionTable with assigned table suffix
func (a OrganizationSubscriptionTable) WithSuffix(suffix string) *OrganizationSubscriptionTable {
	return newOrganizationSubscriptionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrganizationSubscriptionTable(schemaName, tableName, alias string) *OrganizationSubscriptionTable {
	return &OrganizationSubscriptionTable{
		organizationSubscriptionTable: newOrganizationSubscriptionTableImpl(schemaName, tableName, alias),
		EXCLUDED:                      newOrganizationSubscriptionTableImpl("", "excluded", ""),
	}
}

func newOrganizationSubscriptionTableImpl(schemaName, tableName, alias string) organizationSubscriptionTable {
	var (
		UniqueIdColumn                        = postgres.StringColumn("UniqueId")
		CreatedAtColumn                       = postgres.TimestampColumn("CreatedAt")
		UpdatedAtColumn                       = postgres.TimestampColumn("UpdatedAt")
		OrganizationIdColumn                  = postgres.StringColumn("OrganizationId")
		SubscriptionStatusColumn              = postgres.StringColumn("SubscriptionStatus")
		SubscriptionTierColumn                = postgres.StringColumn("SubscriptionTier")
		GatewaySubscriptionIdColumn           = postgres.StringColumn("GatewaySubscriptionId")
		ValidTillColumn                       = postgres.TimestampColumn("ValidTill")
		LastRenewedAtColumn                   = postgres.TimestampColumn("LastRenewedAt")
		CancelledAtColumn                     = postgres.TimestampColumn("CancelledAt")
		WillBeCancelledAtTheEndOfPeriodColumn = postgres.BoolColumn("WillBeCancelledAtTheEndOfPeriod")
		NumberOfRenewalsColumn                = postgres.IntegerColumn("NumberOfRenewals")
		allColumns                            = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, OrganizationIdColumn, SubscriptionStatusColumn, SubscriptionTierColumn, GatewaySubscriptionIdColumn, ValidTillColumn, LastRenewedAtColumn, CancelledAtColumn, WillBeCancelledAtTheEndOfPeriodColumn, NumberOfRenewalsColumn}
		mutableColumns                        = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, OrganizationIdColumn, SubscriptionStatusColumn, SubscriptionTierColumn, GatewaySubscriptionIdColumn, ValidTillColumn, LastRenewedAtColumn, CancelledAtColumn, WillBeCancelledAtTheEndOfPeriodColumn, NumberOfRenewalsColumn}
	)

	return organizationSubscriptionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:                        UniqueIdColumn,
		CreatedAt:                       CreatedAtColumn,
		UpdatedAt:                       UpdatedAtColumn,
		OrganizationId:                  OrganizationIdColumn,
		SubscriptionStatus:              SubscriptionStatusColumn,
		SubscriptionTier:                SubscriptionTierColumn,
		GatewaySubscriptionId:           GatewaySubscriptionIdColumn,
		ValidTill:                       ValidTillColumn,
		LastRenewedAt:                   LastRenewedAtColumn,
		CancelledAt:                     CancelledAtColumn,
		WillBeCancelledAtTheEndOfPeriod: WillBeCancelledAtTheEndOfPeriodColumn,
		NumberOfRenewals:                NumberOfRenewalsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

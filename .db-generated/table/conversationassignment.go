//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ConversationAssignment = newConversationAssignmentTable("public", "ConversationAssignment", "")

type conversationAssignmentTable struct {
	postgres.Table

	// Columns
	CreatedAt                      postgres.ColumnTimestampz
	UpdatedAt                      postgres.ColumnTimestampz
	ConversationId                 postgres.ColumnString
	AssignedToOrganizationMemberId postgres.ColumnString
	Status                         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ConversationAssignmentTable struct {
	conversationAssignmentTable

	EXCLUDED conversationAssignmentTable
}

// AS creates new ConversationAssignmentTable with assigned alias
func (a ConversationAssignmentTable) AS(alias string) *ConversationAssignmentTable {
	return newConversationAssignmentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConversationAssignmentTable with assigned schema name
func (a ConversationAssignmentTable) FromSchema(schemaName string) *ConversationAssignmentTable {
	return newConversationAssignmentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConversationAssignmentTable with assigned table prefix
func (a ConversationAssignmentTable) WithPrefix(prefix string) *ConversationAssignmentTable {
	return newConversationAssignmentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConversationAssignmentTable with assigned table suffix
func (a ConversationAssignmentTable) WithSuffix(suffix string) *ConversationAssignmentTable {
	return newConversationAssignmentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConversationAssignmentTable(schemaName, tableName, alias string) *ConversationAssignmentTable {
	return &ConversationAssignmentTable{
		conversationAssignmentTable: newConversationAssignmentTableImpl(schemaName, tableName, alias),
		EXCLUDED:                    newConversationAssignmentTableImpl("", "excluded", ""),
	}
}

func newConversationAssignmentTableImpl(schemaName, tableName, alias string) conversationAssignmentTable {
	var (
		CreatedAtColumn                      = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn                      = postgres.TimestampzColumn("UpdatedAt")
		ConversationIdColumn                 = postgres.StringColumn("ConversationId")
		AssignedToOrganizationMemberIdColumn = postgres.StringColumn("AssignedToOrganizationMemberId")
		StatusColumn                         = postgres.StringColumn("Status")
		allColumns                           = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, ConversationIdColumn, AssignedToOrganizationMemberIdColumn, StatusColumn}
		mutableColumns                       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, StatusColumn}
	)

	return conversationAssignmentTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CreatedAt:                      CreatedAtColumn,
		UpdatedAt:                      UpdatedAtColumn,
		ConversationId:                 ConversationIdColumn,
		AssignedToOrganizationMemberId: AssignedToOrganizationMemberIdColumn,
		Status:                         StatusColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

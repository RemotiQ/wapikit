//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Organization = newOrganizationTable("public", "Organization", "")

type organizationTable struct {
	postgres.Table

	// Columns
	UniqueId           postgres.ColumnString
	CreatedAt          postgres.ColumnTimestampz
	UpdatedAt          postgres.ColumnTimestampz
	Name               postgres.ColumnString
	Description        postgres.ColumnString
	WebsiteUrl         postgres.ColumnString
	LogoUrl            postgres.ColumnString
	FaviconUrl         postgres.ColumnString
	SlackWebhookUrl    postgres.ColumnString
	DiscordWebhookUrl  postgres.ColumnString
	SmtpClientHost     postgres.ColumnString
	SmtpClientUsername postgres.ColumnString
	SmtpClientPassword postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrganizationTable struct {
	organizationTable

	EXCLUDED organizationTable
}

// AS creates new OrganizationTable with assigned alias
func (a OrganizationTable) AS(alias string) *OrganizationTable {
	return newOrganizationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrganizationTable with assigned schema name
func (a OrganizationTable) FromSchema(schemaName string) *OrganizationTable {
	return newOrganizationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrganizationTable with assigned table prefix
func (a OrganizationTable) WithPrefix(prefix string) *OrganizationTable {
	return newOrganizationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrganizationTable with assigned table suffix
func (a OrganizationTable) WithSuffix(suffix string) *OrganizationTable {
	return newOrganizationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrganizationTable(schemaName, tableName, alias string) *OrganizationTable {
	return &OrganizationTable{
		organizationTable: newOrganizationTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newOrganizationTableImpl("", "excluded", ""),
	}
}

func newOrganizationTableImpl(schemaName, tableName, alias string) organizationTable {
	var (
		UniqueIdColumn           = postgres.StringColumn("UniqueId")
		CreatedAtColumn          = postgres.TimestampzColumn("CreatedAt")
		UpdatedAtColumn          = postgres.TimestampzColumn("UpdatedAt")
		NameColumn               = postgres.StringColumn("Name")
		DescriptionColumn        = postgres.StringColumn("Description")
		WebsiteUrlColumn         = postgres.StringColumn("WebsiteUrl")
		LogoUrlColumn            = postgres.StringColumn("LogoUrl")
		FaviconUrlColumn         = postgres.StringColumn("FaviconUrl")
		SlackWebhookUrlColumn    = postgres.StringColumn("SlackWebhookUrl")
		DiscordWebhookUrlColumn  = postgres.StringColumn("DiscordWebhookUrl")
		SmtpClientHostColumn     = postgres.StringColumn("SmtpClientHost")
		SmtpClientUsernameColumn = postgres.StringColumn("SmtpClientUsername")
		SmtpClientPasswordColumn = postgres.StringColumn("SmtpClientPassword")
		allColumns               = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, NameColumn, DescriptionColumn, WebsiteUrlColumn, LogoUrlColumn, FaviconUrlColumn, SlackWebhookUrlColumn, DiscordWebhookUrlColumn, SmtpClientHostColumn, SmtpClientUsernameColumn, SmtpClientPasswordColumn}
		mutableColumns           = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, NameColumn, DescriptionColumn, WebsiteUrlColumn, LogoUrlColumn, FaviconUrlColumn, SlackWebhookUrlColumn, DiscordWebhookUrlColumn, SmtpClientHostColumn, SmtpClientUsernameColumn, SmtpClientPasswordColumn}
	)

	return organizationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:           UniqueIdColumn,
		CreatedAt:          CreatedAtColumn,
		UpdatedAt:          UpdatedAtColumn,
		Name:               NameColumn,
		Description:        DescriptionColumn,
		WebsiteUrl:         WebsiteUrlColumn,
		LogoUrl:            LogoUrlColumn,
		FaviconUrl:         FaviconUrlColumn,
		SlackWebhookUrl:    SlackWebhookUrlColumn,
		DiscordWebhookUrl:  DiscordWebhookUrlColumn,
		SmtpClientHost:     SmtpClientHostColumn,
		SmtpClientUsername: SmtpClientUsernameColumn,
		SmtpClientPassword: SmtpClientPasswordColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

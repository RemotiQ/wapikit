//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type PricingPlanTierEnum string

const (
	PricingPlanTierEnum_Pro        PricingPlanTierEnum = "Pro"
	PricingPlanTierEnum_Scale      PricingPlanTierEnum = "Scale"
	PricingPlanTierEnum_ScalePlus  PricingPlanTierEnum = "ScalePlus"
	PricingPlanTierEnum_ScaleMax   PricingPlanTierEnum = "ScaleMax"
	PricingPlanTierEnum_Enterprise PricingPlanTierEnum = "Enterprise"
)

func (e *PricingPlanTierEnum) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "Pro":
		*e = PricingPlanTierEnum_Pro
	case "Scale":
		*e = PricingPlanTierEnum_Scale
	case "ScalePlus":
		*e = PricingPlanTierEnum_ScalePlus
	case "ScaleMax":
		*e = PricingPlanTierEnum_ScaleMax
	case "Enterprise":
		*e = PricingPlanTierEnum_Enterprise
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for PricingPlanTierEnum enum")
	}

	return nil
}

func (e PricingPlanTierEnum) String() string {
	return string(e)
}

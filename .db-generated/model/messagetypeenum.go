//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type MessageTypeEnum string

const (
	MessageTypeEnum_Text        MessageTypeEnum = "Text"
	MessageTypeEnum_Image       MessageTypeEnum = "Image"
	MessageTypeEnum_Video       MessageTypeEnum = "Video"
	MessageTypeEnum_Audio       MessageTypeEnum = "Audio"
	MessageTypeEnum_Document    MessageTypeEnum = "Document"
	MessageTypeEnum_Sticker     MessageTypeEnum = "Sticker"
	MessageTypeEnum_Location    MessageTypeEnum = "Location"
	MessageTypeEnum_Contacts    MessageTypeEnum = "Contacts"
	MessageTypeEnum_Reaction    MessageTypeEnum = "Reaction"
	MessageTypeEnum_Address     MessageTypeEnum = "Address"
	MessageTypeEnum_Interactive MessageTypeEnum = "Interactive"
	MessageTypeEnum_Template    MessageTypeEnum = "Template"
)

func (e *MessageTypeEnum) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "Text":
		*e = MessageTypeEnum_Text
	case "Image":
		*e = MessageTypeEnum_Image
	case "Video":
		*e = MessageTypeEnum_Video
	case "Audio":
		*e = MessageTypeEnum_Audio
	case "Document":
		*e = MessageTypeEnum_Document
	case "Sticker":
		*e = MessageTypeEnum_Sticker
	case "Location":
		*e = MessageTypeEnum_Location
	case "Contacts":
		*e = MessageTypeEnum_Contacts
	case "Reaction":
		*e = MessageTypeEnum_Reaction
	case "Address":
		*e = MessageTypeEnum_Address
	case "Interactive":
		*e = MessageTypeEnum_Interactive
	case "Template":
		*e = MessageTypeEnum_Template
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for MessageTypeEnum enum")
	}

	return nil
}

func (e MessageTypeEnum) String() string {
	return string(e)
}

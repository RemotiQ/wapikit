//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type MessageStatusEnum string

const (
	MessageStatusEnum_Sent        MessageStatusEnum = "Sent"
	MessageStatusEnum_Delivered   MessageStatusEnum = "Delivered"
	MessageStatusEnum_Read        MessageStatusEnum = "Read"
	MessageStatusEnum_Failed      MessageStatusEnum = "Failed"
	MessageStatusEnum_UnDelivered MessageStatusEnum = "UnDelivered"
)

func (e *MessageStatusEnum) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "Sent":
		*e = MessageStatusEnum_Sent
	case "Delivered":
		*e = MessageStatusEnum_Delivered
	case "Read":
		*e = MessageStatusEnum_Read
	case "Failed":
		*e = MessageStatusEnum_Failed
	case "UnDelivered":
		*e = MessageStatusEnum_UnDelivered
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for MessageStatusEnum enum")
	}

	return nil
}

func (e MessageStatusEnum) String() string {
	return string(e)
}

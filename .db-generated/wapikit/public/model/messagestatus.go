//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type MessageStatus string

const (
	MessageStatus_Sent        MessageStatus = "sent"
	MessageStatus_Delivered   MessageStatus = "delivered"
	MessageStatus_Read        MessageStatus = "read"
	MessageStatus_Failed      MessageStatus = "failed"
	MessageStatus_Undelivered MessageStatus = "undelivered"
)

func (e *MessageStatus) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "sent":
		*e = MessageStatus_Sent
	case "delivered":
		*e = MessageStatus_Delivered
	case "read":
		*e = MessageStatus_Read
	case "failed":
		*e = MessageStatus_Failed
	case "undelivered":
		*e = MessageStatus_Undelivered
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for MessageStatus enum")
	}

	return nil
}

func (e MessageStatus) String() string {
	return string(e)
}

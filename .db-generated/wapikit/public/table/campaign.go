//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Campaign = newCampaignTable("public", "Campaign", "")

type campaignTable struct {
	postgres.Table

	// Columns
	UniqueId                      postgres.ColumnString
	CreatedAt                     postgres.ColumnTimestamp
	UpdatedAt                     postgres.ColumnTimestamp
	Name                          postgres.ColumnString
	Status                        postgres.ColumnString
	CreatedByOrganisationMemberId postgres.ColumnString
	MessageTemplateId             postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CampaignTable struct {
	campaignTable

	EXCLUDED campaignTable
}

// AS creates new CampaignTable with assigned alias
func (a CampaignTable) AS(alias string) *CampaignTable {
	return newCampaignTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CampaignTable with assigned schema name
func (a CampaignTable) FromSchema(schemaName string) *CampaignTable {
	return newCampaignTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CampaignTable with assigned table prefix
func (a CampaignTable) WithPrefix(prefix string) *CampaignTable {
	return newCampaignTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CampaignTable with assigned table suffix
func (a CampaignTable) WithSuffix(suffix string) *CampaignTable {
	return newCampaignTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCampaignTable(schemaName, tableName, alias string) *CampaignTable {
	return &CampaignTable{
		campaignTable: newCampaignTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newCampaignTableImpl("", "excluded", ""),
	}
}

func newCampaignTableImpl(schemaName, tableName, alias string) campaignTable {
	var (
		UniqueIdColumn                      = postgres.StringColumn("UniqueId")
		CreatedAtColumn                     = postgres.TimestampColumn("CreatedAt")
		UpdatedAtColumn                     = postgres.TimestampColumn("UpdatedAt")
		NameColumn                          = postgres.StringColumn("Name")
		StatusColumn                        = postgres.StringColumn("Status")
		CreatedByOrganisationMemberIdColumn = postgres.StringColumn("CreatedByOrganisationMemberId")
		MessageTemplateIdColumn             = postgres.StringColumn("MessageTemplateId")
		allColumns                          = postgres.ColumnList{UniqueIdColumn, CreatedAtColumn, UpdatedAtColumn, NameColumn, StatusColumn, CreatedByOrganisationMemberIdColumn, MessageTemplateIdColumn}
		mutableColumns                      = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, NameColumn, StatusColumn, CreatedByOrganisationMemberIdColumn, MessageTemplateIdColumn}
	)

	return campaignTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UniqueId:                      UniqueIdColumn,
		CreatedAt:                     CreatedAtColumn,
		UpdatedAt:                     UpdatedAtColumn,
		Name:                          NameColumn,
		Status:                        StatusColumn,
		CreatedByOrganisationMemberId: CreatedByOrganisationMemberIdColumn,
		MessageTemplateId:             MessageTemplateIdColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

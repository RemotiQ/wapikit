openapi: 3.0.0

servers:
  - description: WapiKit Developement Server
    url: http://127.0.0.1:5000/api

info:
  version: "0.0.1"
  title: Wapikit
  description: The API collection for WapiKit
  license:
    name: Apache 2.0 license
    url: https://github.com/sarthakjdev/wapikit/blob/master/LICENSE

tags:
  - name: Auth
    description: Auth API

  - name: Members
    description: Members

  - name: Admin
    description: Admin API

  - name: Lists
    description: User API

  - name: Organization Members
    description: Organization Members API

  - name: Contacts
    description: Contacts API

  - name: Campaigns
    description: Campaigns API

  - name: Messages
    description: Messages API

  - name: Conversations
    description: Conversations API

  - name: Miscellaneous
    description: Miscellaneous API

paths:
  /health-check:
    get:
      tags:
        - Miscellaneous
      description: healthcheck endpoint
      operationId: getHealthCheck
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean

  /login:
    post:
      tags:
        - Auth
      description: login endpoint
      operationId: login
      requestBody:
        description: login credentials
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestBodySchema"
      responses:
        "200":
          description: login response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponseBodySchema"

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/user:
    get:
      tags:
        - User API
      description: returns the user object
      operationId: getUser
      responses:
        "200":
          description: user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/UserSchema"

  /api/auth/api-keys:
    get:
      tags:
        - Auth API
      description: returns all api keys
      operationId: getApiKeys
      responses:
        "200":
          description: api keys list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetApiKeysResponseSchema"

  /api/auth/switch:
    post:
      tags:
        - Auth
      description: switch user organization
      operationId: switchOrganization
      requestBody:
        description: organization id
        content:
          application/json:
            schema:
              type: object
              properties:
                organizationId:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SwitchOrganizationResponseSchema"

  /settings:
    get:
      tags:
        - Miscellaneous
      description: returns all settings
      operationId: getAllSettings
      responses:
        "200":
          description: settings list
          content:
            application/json:
              schema:
                type: object
                properties:
                  settings:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string

  /syncTemplates:
    get:
      tags:
        - Miscellaneous
      description: returns all templates
      operationId: getAllTemplates
      responses:
        "200":
          description: templates list
          content:
            application/json:
              schema:
                type: object
                properties:
                  templates:
                    type: array
                    items:
                      type: object
                      properties:
                        uniqueId:
                          type: string
                        name:
                          type: string
                        content:
                          type: string
                        type:
                          type: string
                        created_at:
                          type: string
                        updated_at:
                          type: string

  /syncMobileNumbers:
    get:
      tags:
        - Miscellaneous
      description: returns all mobile numbers
      operationId: getAllMobileNumbers
      responses:
        "200":
          description: mobile numbers list
          content:
            application/json:
              schema:
                type: object
                properties:
                  mobileNumbers:
                    type: array
                    items:
                      type: object
                      properties:
                        uniqueId:
                          type: string
                        number:
                          type: string
                        created_at:
                          type: string
                        updated_at:
                          type: string

  /members:
    get:
      tags:
        - Organization Members
      description: returns all the organization members
      operationId: getOrganizationMembers
      parameters:
        - in: query
          name: page
          description: number of records to skip
          schema:
            type: integer
            format: int32
        - in: query
          name: per_page
          description: max number of records to return per page
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: organization members list
          content:
            application/json:
              schema:
                type: object
                properties:
                  members:
                    type: array
                    items:
                      $ref: "#/components/schemas/OrganizationMemberSchema"
                  paginationMeta:
                    $ref: "#/components/schemas/PaginationMeta"
    post:
      tags:
        - Organization Members
      description: create a new organization member
      operationId: createOrganizationMember
      requestBody:
        description: new organization member info
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewOrganizationMemberSchema"

      responses:
        "200":
          description: user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/OrganizationMemberSchema"

  "/member/{id}":
    get:
      description: handles the retrieval of a single member by id.
      operationId: getOrganizationMemberById
      tags:
        - Organization Members
      parameters:
        - in: path
          name: id
          required: true
          description: The id value of the org member you want to get.
          schema:
            type: string
      responses:
        "200":
          description: gets a single organization member.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/OrganizationMemberSchema"
    put:
      description: modify organization member data
      operationId: updateOrganizationMemberById
      tags:
        - Organization Members
      parameters:
        - in: path
          name: id
          required: true
          description: The id of org member to update
          schema:
            type: string
      requestBody:
        description: organization member updated info
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrganizationMemberSchema"
      responses:
        "200":
          description: returns updated organization member.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationMemberSchema"
    delete:
      description: handles organization member deletion based on id
      operationId: deleteOrganizationMemberById
      tags:
        - Organization Members
      parameters:
        - in: path
          name: id
          required: true
          description: The id value of the org member you want to delete.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean

  /contacts:
    get:
      tags:
        - Contacts
      description: returns all contacts.
      operationId: getContacts
      parameters:
        - in: query
          name: page
          description: number of records to skip
          schema:
            type: integer
            format: int32
        - in: query
          name: per_page
          description: max number of records to return per page
          schema:
            type: integer
            format: int32
        - in: query
          name: list_id
          description: query subscribers with a list id.
          schema:
            type: string
        - in: query
          name: order
          description: order by asc or desc
          schema:
            type: string
        - in: query
          name: status
          description: sort by a field
          schema:
            type: string

      responses:
        "200":
          description: contacts list
          content:
            application/json:
              schema:
                type: object
                properties:
                  contacts:
                    type: array
                    items:
                      $ref: "#/components/schemas/ContactSchema"
                  paginationMeta:
                    $ref: "#/components/schemas/PaginationMeta"
    post:
      description: handles creation of new contact
      operationId: createContact
      tags:
        - Contacts
      requestBody:
        description: new contact info
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewContactSchema"

      responses:
        "200":
          description: contact object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ContactSchema"

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

    delete:
      description: handles contact deletion
      operationId: deleteContactsByList
      tags:
        - Contacts
      parameters:
        - in: query
          name: id
          required: true
          description: contact id/s to be deleted
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  "/contacts/{id}":
    get:
      description: handles the retrieval of a single contact by id.
      operationId: getContactById
      tags:
        - Contacts
      parameters:
        - in: path
          name: id
          required: true
          description: The id value of the contact you want to get.
          schema:
            type: string
      responses:
        "200":
          description: gets a single contact.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ContactSchema"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    put:
      description: modify contact data
      operationId: updateContactById
      tags:
        - Contacts
      parameters:
        - in: path
          name: id
          required: true
          description: The id of contact to update
          schema:
            type: string
      requestBody:
        description: updated contact info
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateContactSchema"
      responses:
        "200":
          description: returns updated contact.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ContactSchema"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      description: handles contact deletion based on id
      operationId: deleteContactById
      tags:
        - Contacts
      parameters:
        - in: path
          name: id
          required: true
          description: The id value of the contacts you want to delete.
          schema:
            type: string

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /lists:
    get:
      tags:
        - Lists
      description: returns all lists.
      operationId: getContactLists
      parameters:
        - in: query
          name: page
          description: number of records to skip
          schema:
            type: integer
            format: int32
        - in: query
          name: per_page
          description: max number of records to return per page
          schema:
            type: integer
            format: int32
        - in: query
          name: order
          description: order by asc or desc
          schema:
            type: string
            enum:
              - asc
              - desc

      responses:
        "200":
          description: list of contact lists
          content:
            application/json:
              schema:
                type: object
                properties:
                  lists:
                    type: array
                    items:
                      $ref: "#/components/schemas/ContactListSchema"
                  paginationMeta:
                    $ref: "#/components/schemas/PaginationMeta"
    post:
      description: handles creation of new list
      operationId: createList
      tags:
        - Lists
      requestBody:
        description: new list info
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewContactListSchema"

      responses:
        "200":
          description: list object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ContactListSchema"

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  "/lists/{id}":
    get:
      description: handles the retrieval of a single list by id.
      operationId: getListById
      tags:
        - Lists
      parameters:
        - in: path
          name: id
          required: true
          description: The id value of the list you want to get.
          schema:
            type: string # uniqueId

      responses:
        "200":
          description: gets a single list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ContactListSchema"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

    put:
      description: modify list data
      operationId: updateListById
      tags:
        - Lists
      parameters:
        - in: path
          name: id
          required: true
          description: The id of list to update
          schema:
            type: string
      requestBody:
        description: updated list info
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateContactListSchema"
      responses:
        "200":
          description: returns updated list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ContactListSchema"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

    delete:
      description: handles list deletion based on id
      operationId: deleteListById
      tags:
        - Lists
      parameters:
        - in: path
          name: id
          required: true
          description: The id value of the list you want to delete.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /campaigns:
    get:
      tags:
        - Campaigns
      description: returns all campaigns.
      operationId: getCampaigns
      parameters:
        - in: query
          name: page
          description: number of records to skip
          schema:
            type: integer
            format: int32
        - in: query
          name: per_page
          description: max number of records to return per page
          schema:
            type: integer
            format: int32
        - in: query
          name: order
          description: order by asc or desc
          schema:
            type: string
            enum:
              - asc
              - desc
        - in: query
          name: status
          description: sort by a field
          schema:
            type: string
            enum:
              - draft
              - sent
              - scheduled
              - running

      responses:
        "200":
          description: list of campaigns
          content:
            application/json:
              schema:
                type: object
                properties:
                  campaigns:
                    type: array
                    items:
                      $ref: "#/components/schemas/CampaignSchema"
                  paginationMeta:
                    $ref: "#/components/schemas/PaginationMeta"
    post:
      description: handles creation of new campaign
      operationId: createCampaign
      tags:
        - Campaigns
      requestBody:
        description: new campaign info
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCampaignSchema"

      responses:
        "200":
          description: campaign object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/CampaignSchema"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  "/campaigns/{id}":
    get:
      description: handles the retrieval of a single campaign by id.
      operationId: getCampaignById
      tags:
        - Campaigns
      parameters:
        - in: path
          name: id
          required: true
          description: The id value of the campaign you want to get.
          schema:
            type: string # uniqueId

      responses:
        "200":
          description: gets a single campaign.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/CampaignSchema"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    put:
      description: modify campaign data
      operationId: updateCampaignById
      tags:
        - Campaigns
      parameters:
        - in: path
          name: id
          required: true
          description: The id of campaign to update
          schema:
            type: string
      requestBody:
        description: updated campaign info
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCampaignSchema"
      responses:
        "200":
          description: returns updated campaign.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/CampaignSchema"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      description: handles campaign deletion based on id
      operationId: deleteCampaignById
      tags:
        - Campaigns
      parameters:
        - in: path
          name: id
          required: true
          description: The id value of the campaign you want to delete.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /conversations:
    get:
      tags:
        - Conversations
      description: returns all conversations.
      operationId: getConversations
      parameters:
        - in: query
          name: page
          description: number of records to skip
          schema:
            type: integer
            format: int32
        - in: query
          name: per_page
          description: max number of records to return per page
          schema:
            type: integer
            format: int32
        - in: query
          name: order
          description: order by asc or desc
          schema:
            type: string
            enum:
              - asc
              - desc
        - in: query
          name: status
          description: sort by a field
          schema:
            type: string
            enum:
              - resolved
              - unresolved
        - name: contact_id
          in: query
          description: query conversations with a contact id.
          schema:
            type: string
        - name: campaign_id
          in: query
          description: query conversations with a campaign id.
          schema:
            type: string
        - name: list_id
          in: query
          description: query conversations with a list id.
          schema:
            type: string
        - name: message_id
          in: query
          description: query conversations with a message id.
          schema:
            type: string

      responses:
        "200":
          description: list of conversations
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      $ref: "#/components/schemas/ConversationSchema"
                  paginationMeta:
                    $ref: "#/components/schemas/PaginationMeta"

  /messages:
    get:
      tags:
        - Messages
      description: returns all messages.
      operationId: getMessages
      parameters:
        - in: query
          name: page
          description: number of records to skip
          schema:
            type: integer
            format: int32
        - in: query
          name: per_page
          description: max number of records to return per page
          schema:
            type: integer
            format: int32
        - in: query
          name: order
          description: order by asc or desc
          schema:
            type: string
            enum:
              - asc
              - desc
        - in: query
          name: status
          description: status of the message
          schema:
            type: string
            enum:
              - read
              - unread
              - sent
              - failed
        - in: query
          name: direction
          description: direction of the message
          schema:
            type: string
            enum:
              - incoming
              - outgoing
        - name: contact_id
          in: query
          description: query messages with a contact id.
          schema:
            type: string
        - name: campaign_id
          in: query
          description: query messages with a campaign id.
          schema:
            type: string
        - name: list_id
          in: query
          description: query messages with a list id.
          schema:
            type: string
        - name: conversation_id
          in: query
          description: query messages with a conversation id.
          schema:
            type: string

      responses:
        "200":
          description: list of messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: "#/components/schemas/MessageSchema"
                  paginationMeta:
                    $ref: "#/components/schemas/PaginationMeta"

components:
  schemas:
    UserRoleEnum:
      type: string
      enum:
        - owner
        - admin
        - member

    UserAccountStatusEnum:
      type: string
      enum:
        - active
        - deleted
        - suspended

    UserSchema:
      type: object
      properties:
        uniqueId:
          type: integer
        username:
          type: string
        email:
          type: string
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        status:
          type: string
        currentOrganizationRole":
          type: string
        organizations:
          type: object
          properties:
            uniqueId:
              type: integer
            name:
              type: string
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
            status:
              $ref: "#/components/schemas/UserAccountStatusEnum"
            role:
              $ref: "#/components/schemas/UserRoleEnum"

    LoginRequestBodySchema:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    LoginResponseBodySchema:
      type: object
      properties:
        token:
          type: string
        isOnboardingCompleted:
          type: boolean

    ApiKeySchema:
      type: object
      properties:
        uniqueId:
          type: string
        key:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    GetApiKeysResponseSchema:
      type: object
      properties:
        apiKeys:
          type: array
          items:
            $ref: "#/components/schemas/ApiKeySchema"

    SwitchOrganizationResponseSchema:
      type: object
      properties:
        token:
          type: string

    ContactSchema:
      type: object
      properties:
        uniqueId:
          type: integer
        name:
          type: string
        phone:
          type: string
        attributes:
          type: object
        created_at:
          type: string
        updated_at:
          type: string

    NewContactSchema:
      type: object
      properties:
        name:
          type: string
        phone:
          type: string
        attributes:
          type: object

    UpdateContactSchema:
      type: object
      properties:
        name:
          type: string
        phone:
          type: string
        attributes:
          type: object

    TagSchema:
      type: object
      properties:
        name:
          type: string
        uniqueId:
          type: string

    ContactListSchema:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        numberOfContacts:
          type: integer
        numberOfCampaignsSent:
          type: integer
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagSchema"
        uniqueId:
          type: string
        created_at:
          type: string
        updated_at:
          type: string

    NewContactListSchema:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagSchema"

    UpdateContactListSchema:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagSchema"

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          format: int32
        per_page:
          type: integer
          format: int32
        total:
          type: integer

    OrganizationMemberSchema:
      type: object
      properties:
        uniqueId:
          type: integer
        username:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        status:
          type: string
        role:
          type: string
          enum:
            - owner
            - admin
            - member

    NewOrganizationMemberSchema:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
            - owner
            - admin
            - member

    UpdateOrganizationMemberSchema:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
            - owner
            - admin
            - member

    CampaignSchema:
      type: object
      properties:
        uniqueId:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - draft
            - sent
            - scheduled
            - running
        sentAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        scheduledAt:
          type: string
          format: date-time
        listId:
          type: string
        templateMessageId:
          type: string
        isLinkTrackingEnabled:
          type: boolean
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagSchema"

    NewCampaignSchema:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        listId:
          type: string
        templateMessageId:
          type: string
        enableLinkTracking:
          type: boolean
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagSchema"

    UpdateCampaignSchema:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        listId:
          type: string
        templateMessageId:
          type: string
        enableLinkTracking:
          type: boolean
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagSchema"

    ConversationSchema:
      type: object
      properties:
        uniqueId:
          type: string
        contactId:
          type: string
        message:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    MessageSchema:
      type: object
      properties:
        uniqueId:
          type: string
        conversationId:
          type: string
        message:
          type: string
        direction:
          type: string
          enum:
            - incoming
            - outgoing
        status:
          type: string
          enum:
            - read
            - unread
            - sent
            - failed
        message_type:
          type: string
          enum:
            - text
            - image
            - video
            - audio
            - document
            - sticker
            - location
            - contacts
            - reaction
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        content:
          type: object
